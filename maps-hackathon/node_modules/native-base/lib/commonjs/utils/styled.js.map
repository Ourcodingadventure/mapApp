{"version":3,"sources":["styled.tsx"],"names":["resolversForBox","color","space","layout","flexbox","border","position","typography","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customTypography","customLayout","shouldEnableNewStyledSystemImplementation","makeStyledComponent","Comp","React","forwardRef","ref","debug","props","style","restProps","console","log","children"],"mappings":"qhBAAA,wEACA,2CASA,0CAUA,oDACA,gC,0FACO,GAAMA,CAAAA,eAAoB,CAAG,CAClCC,mBADkC,CAElCC,mBAFkC,CAGlCC,oBAHkC,CAIlCC,qBAJkC,CAKlCC,oBALkC,CAMlCC,sBANkC,CAOlCC,wBAPkC,CAQlCC,2BARkC,CASlCC,yBATkC,CAUlCC,6BAVkC,CAWlCC,0BAXkC,CAYlCC,yBAZkC,CAalCC,wBAbkC,CAclCC,6BAdkC,CAelCC,yBAfkC,CAA7B,C,wCAkBA,GAAMC,CAAAA,yCAAyC,CAAG,IAAlD,C,4FAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,IAAD,CAAe,CAChD,GAAIF,yCAAJ,CAA+C,CAC7C,MAAOG,gBAAMC,UAAN,CAAiB,cAA2BC,GAA3B,CAAwC,IAArCC,CAAAA,KAAqC,MAArCA,KAAqC,CAA3BC,KAA2B,iFACnC,wCAA6BA,KAA7B,CADmC,6EACvDC,KADuD,2BAChDC,SADgD,2BAE9D,GAAIH,KAAJ,CAAW,CAETI,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BH,KAA3B,CAAkC,kBAAlC,CAAsDC,SAAtD,EACD,CACD,MACE,8BAAC,IAAD,0BAAUA,SAAV,EAAqB,KAAK,CAAED,KAA5B,CAAmC,GAAG,CAAEH,GAAxC,8EACGE,KAAK,CAACK,QADT,CADF,CAKD,CAXM,CAAP,CAYD,CAbD,IAaO,CAEL,MAAO,oBAAOV,IAAP,eAAgBlB,eAAhB,CAAP,CACD,CACF,CAlBM,C","sourcesContent":["import styled from 'styled-components/native';\nimport {\n  border,\n  color,\n  flexbox,\n  layout,\n  position,\n  space,\n  typography,\n} from 'styled-system';\nimport {\n  customBackground,\n  customBorder,\n  customExtra,\n  customLayout,\n  customOutline,\n  customPosition,\n  customShadow,\n  customTypography,\n} from './customProps';\nimport React from 'react';\nimport { useStyledSystemPropsResolver } from '../hooks/';\nexport const resolversForBox: any = [\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  typography,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customTypography,\n  customLayout,\n];\n\nexport const shouldEnableNewStyledSystemImplementation = true;\n\nexport const makeStyledComponent = (Comp: any) => {\n  if (shouldEnableNewStyledSystemImplementation) {\n    return React.forwardRef(({ debug, ...props }: any, ref: any) => {\n      const [style, restProps] = useStyledSystemPropsResolver(props);\n      if (debug) {\n        /* eslint-disable-next-line */\n        console.log('style:: => ', style, ' restProps:: => ', restProps);\n      }\n      return (\n        <Comp {...restProps} style={style} ref={ref}>\n          {props.children}\n        </Comp>\n      );\n    });\n  } else {\n    //@ts-ignore\n    return styled(Comp)(...resolversForBox);\n  }\n};\n"]}