{"version":3,"sources":["ButtonGroup.tsx"],"names":["ref","children","divider","props","space","direction","variant","size","colorScheme","isDisabled","isAttached","newProps","borderRadius","computedChildren","Array","isArray","React","Children","map","child","index","cloneElement","key","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth"],"mappings":"wbAAA,qDAEA,2DACA,+BACA,2E,mIAEe,gBACb,sBACE,cAAqDA,GAArD,CAAmE,IAAhEC,CAAAA,QAAgE,MAAhEA,QAAgE,CAAtDC,OAAsD,MAAtDA,OAAsD,CAA1CC,KAA0C,4FAU7D,sCAAmB,aAAnB,CAAkCA,KAAlC,CAV6D,CAE/DC,KAF+D,qBAE/DA,KAF+D,CAG/DC,SAH+D,qBAG/DA,SAH+D,CAI/DC,OAJ+D,qBAI/DA,OAJ+D,CAK/DC,IAL+D,qBAK/DA,IAL+D,CAM/DC,WAN+D,qBAM/DA,WAN+D,CAO/DC,UAP+D,qBAO/DA,UAP+D,CAQ/DC,UAR+D,qBAQ/DA,UAR+D,CAS5DC,QAT4D,oKAYxC,sCAAmB,QAAnB,CAA6BR,KAA7B,CAZwC,CAYzDS,YAZyD,sBAYzDA,YAZyD,CAajE,GAAIC,CAAAA,gBAAJ,CAEA,GAAIC,KAAK,CAACC,OAAN,CAAcd,QAAd,CAAJ,CAA6B,CAC3BY,gBAAgB,CAAGG,eAAMC,QAAN,CAAeC,GAAf,CACjBjB,QADiB,CAEjB,SAACkB,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOJ,gBAAMK,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,uBAAwBF,KADtB,CAELd,OAAO,CAAPA,OAFK,CAGLC,IAAI,CAAJA,IAHK,CAILC,WAAW,CAAXA,WAJK,CAKLC,UAAU,CAAVA,UALK,EAQDC,UAAU,CAAG,CAAEE,YAAY,CAAE,CAAhB,CAAH,CAAyB,EARlC,CASDF,UAAU,EAAIU,KAAK,GAAK,CAAxB,CACAf,SAAS,GAAK,QAAd,CACE,CAAEkB,eAAe,CAAEX,YAAnB,CADF,CAEE,CAAEY,gBAAgB,CAAEZ,YAApB,CAHF,CAIA,EAbC,CAcDF,UAAU,EAAIU,KAAK,GAAK,CAAAnB,QAAQ,MAAR,QAAAA,QAAQ,CAAEwB,MAAV,EAAmB,CAA3C,CACApB,SAAS,GAAK,QAAd,CACE,CAAEqB,kBAAkB,CAAEd,YAAtB,CADF,CAEE,CAAEe,iBAAiB,CAAEf,YAArB,CAHF,CAIA,EAlBC,CAqBDF,UAAU,EAAIU,KAAK,GAAK,CAAxB,CACAf,SAAS,GAAK,QAAd,CACE,CAAEuB,cAAc,CAAE,CAAlB,CADF,CAEE,CAAEC,eAAe,CAAE,CAAnB,CAHF,CAIA,EAzBC,CA0BFV,KAAK,CAAChB,KA1BJ,EAAP,CA4BD,CA/BgB,CAAnB,CAiCD,CAlCD,IAkCO,CACLU,gBAAgB,CAAGG,eAAMC,QAAN,CAAeC,GAAf,CACjBjB,QADiB,CAEjB,SAACkB,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOJ,gBAAMK,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,uBAAwBF,KADtB,CAELd,OAAO,CAAPA,OAFK,CAGLC,IAAI,CAAJA,IAHK,CAILC,WAAW,CAAXA,WAJK,CAKLC,UAAU,CAAVA,UALK,EAMFU,KAAK,CAAChB,KANJ,EAAP,CAQD,CAXgB,CAAnB,CAaD,CAED,GAAI,iDAAsBA,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,YAAD,wBACE,OAAO,CAAED,OADX,CAEE,KAAK,CAAEQ,UAAU,CAAG,CAAH,CAAON,KAF1B,CAGE,SAAS,CAAEC,SAHb,EAIMM,QAJN,EAKE,GAAG,CAAEX,GALP,8EAOGa,gBAPH,CADF,CAWD,CAhFH,CADa,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    ({ children, divider, ...props }: IButtonGroupProps, ref?: any) => {\n      const {\n        space,\n        direction,\n        variant,\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren: JSX.Element | JSX.Element[];\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]}