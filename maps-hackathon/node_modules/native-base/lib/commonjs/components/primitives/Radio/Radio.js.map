{"version":3,"sources":["Radio.tsx"],"names":["Radio","ref","icon","wrapperRef","size","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","contextState","React","useContext","RadioContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","inputRef","useRef","state","inputProps","isDisabled","disabled","isChecked","checked","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_interactionBox","_icon","resolvedProps","sizedIcon","cloneElement","stylingProps","margin","layout","flexbox","position","layoutProps","nonLayoutProps","children"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\n\nconst Radio = ({ icon, wrapperRef, size, ...props }: IRadioProps, ref: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n\n  const contextState = React.useContext(RadioContext);\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(contextState, props);\n\n  const inputRef = React.useRef(null);\n  const { inputProps } = useRadio(props, contextState.state, inputRef);\n  const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _interactionBox,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Radio',\n    {\n      ...combinedProps,\n      size,\n    },\n    {\n      isInvalid,\n      isReadOnly,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered,\n      isPressed,\n      isFocused,\n    }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // only calling below function when icon exist.\n  const sizedIcon = () =>\n    //@ts-ignore\n    React.cloneElement(icon, {\n      ..._icon,\n    });\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    '_text',\n  ]);\n\n  return (\n    <Pressable\n      {...pressableProps}\n      {...(inputProps as IPressableProps)}\n      ref={mergeRefs([ref, wrapperRef])}\n      accessibilityRole=\"radio\"\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n    >\n      <Center\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        borderRadius=\"full\"\n        {...layoutProps}\n      >\n        <Center>\n          {/* Interaction Wrapper */}\n          <Box {..._interactionBox} p={5} w=\"100%\" height=\"100%\" />\n          {/* radio */}\n          <Center {...nonLayoutProps}>\n            {icon && sizedIcon && isChecked ? (\n              sizedIcon()\n            ) : (\n              <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n            )}\n          </Center>\n        </Center>\n        {/* Label */}\n        {props.children}\n      </Center>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}