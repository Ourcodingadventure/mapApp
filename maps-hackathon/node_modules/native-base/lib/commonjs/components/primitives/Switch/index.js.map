{"version":3,"sources":["index.tsx"],"names":["StyledNBSwitch","RNSwitch","Switch","ref","style","onToggle","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","props","state","defaultSelected","borderColorInvalid","checked","isSelected","inValidPropFactors","borderWidth","borderRadius","borderColor","_ref","React","useRef","isHovered","_onTrackColor","onTrackColor","_offTrackColor","offTrackColor","_onThumbColor","onThumbColor","_offThumbColor","offThumbColor","themeStyle","resolvedProps","computedStyle","StyleSheet","flatten","false","true","toggle"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { StyleSheet, ViewStyle, Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    style,\n    onToggle,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n\n  const borderColorInvalid = useToken('colors', 'danger.600');\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const inValidPropFactors = {\n    borderWidth: 1,\n    borderRadius: 16,\n    borderColor: borderColorInvalid,\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    style: themeStyle,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered,\n    isDisabled,\n    isInvalid,\n    isChecked: checked,\n  });\n\n  const computedStyle: ViewStyle = StyleSheet.flatten([\n    themeStyle,\n    style,\n    isInvalid ? inValidPropFactors : {},\n  ]);\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={isDisabled}\n      onValueChange={onToggle ? onToggle : state.toggle}\n      value={checked}\n      style={computedStyle}\n      ref={mergeRefs([ref, _ref])}\n      opacity={isDisabled ? 0.4 : 1}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]}