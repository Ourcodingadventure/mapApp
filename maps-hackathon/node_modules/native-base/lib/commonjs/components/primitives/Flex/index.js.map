{"version":3,"sources":["index.tsx"],"names":["Flex","props","ref","align","justify","wrap","basis","grow","shrink","direction","resolvedProps","flexDirection","alignItems","justifyContent","flexGrow","flexBasis","flexShrink","flexWrap","Spacer"],"mappings":"ucAAA,qDACA,mDAEA,2DACA,2E,8GAEA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,KAAD,CAAoBC,GAApB,CAAiC,yBAUxC,sCAAmB,MAAnB,CAA2BD,KAA3B,CAVwC,CAE1CE,KAF0C,qBAE1CA,KAF0C,CAG1CC,OAH0C,qBAG1CA,OAH0C,CAI1CC,IAJ0C,qBAI1CA,IAJ0C,CAK1CC,KAL0C,qBAK1CA,KAL0C,CAM1CC,IAN0C,qBAM1CA,IAN0C,CAO1CC,MAP0C,qBAO1CA,MAP0C,CAQ1CC,SAR0C,qBAQ1CA,SAR0C,CASvCC,aATuC,2HAa5C,GAAI,iDAAsBT,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,YAAD,0BACMA,KADN,CAEMS,aAFN,EAGE,OAAO,CAAC,MAHV,CAIE,aAAa,CAAED,SAAS,EAAIC,aAAa,CAACC,aAJ5C,CAKE,UAAU,CAAER,KAAK,EAAIO,aAAa,CAACE,UALrC,CAME,cAAc,CAAER,OAAO,EAAIM,aAAa,CAACG,cAN3C,CAOE,QAAQ,CAAEN,IAAI,EAAIG,aAAa,CAACI,QAPlC,CAQE,SAAS,CAAER,KAAK,EAAII,aAAa,CAACK,SARpC,CASE,UAAU,CAAEP,MAAM,EAAIE,aAAa,CAACM,UATtC,CAUE,QAAQ,CAAEX,IAAI,EAAIK,aAAa,CAACO,QAVlC,CAWE,GAAG,CAAEf,GAXP,8EADF,CAeD,CAhCD,CAmCO,GAAMgB,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACjB,KAAD,CAAgB,CACpC,MAAO,8BAAC,YAAD,wBAAK,QAAQ,CAAE,CAAf,EAAsBA,KAAtB,gFAAP,CACD,CAFM,C,mCAKQ,gBAAK,sBAAWD,IAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...props}\n      {...resolvedProps}\n      display=\"flex\"\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  return <Box flexGrow={1} {...props} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]}