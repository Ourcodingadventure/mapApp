{"version":3,"sources":["index.tsx"],"names":["Hidden","children","props","ignoreProps","from","till","only","platform","colorMode","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","isArray","includes","Platform","OS"],"mappings":"qYAAA,4BAEA,2DACA,qCACA,sDACA,yCAEO,QAASA,CAAAA,MAAT,MAAsD,IAApCC,CAAAA,QAAoC,MAApCA,QAAoC,CAAvBC,KAAuB,kFACT,sCAChD,QADgD,CAEhDA,KAFgD,CAGhD,CACEC,WAAW,CAAE,CAAC,MAAD,CAAS,UAAT,CADf,CAHgD,CADS,CACnDC,IADmD,qBACnDA,IADmD,CAC7CC,IAD6C,qBAC7CA,IAD6C,CACvCC,IADuC,qBACvCA,IADuC,CACjCC,QADiC,qBACjCA,QADiC,CACvBC,SADuB,qBACvBA,SADuB,eAQnC,qBARmC,CAQnDC,WARmD,WAQnDA,WARmD,CAS3D,GAAMC,CAAAA,gBAAgB,CAAG,0BAAzB,CAEA,GAAMC,CAAAA,qBAAqB,CAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,CAC5B,SAACC,GAAD,CAAWC,GAAX,CAA2B,CACzBD,GAAG,CAACC,GAAD,CAAH,CAAWA,GAAX,CACA,MAAOD,CAAAA,GAAP,CACD,CAJ2B,CAK5B,EAL4B,CAA9B,CAOA,GAAME,CAAAA,eAAe,CAAG,8BAAmBN,qBAAnB,CAAxB,CAlB2D,cAmB1B,oBAAS,aAAT,CAAwB,CAACM,eAAD,CAAxB,CAnB0B,qDAmBpDC,sBAnBoD,8BAoB7B,oBAAS,aAAT,CAAwB,CAACd,IAAD,CAAxB,CApB6B,sDAoBpDe,mBApBoD,8BAqB7B,oBAAS,aAAT,CAAwB,CAACd,IAAD,CAAxB,CArB6B,sDAqBpDe,mBArBoD,eAwB3D,GAAI,CAAChB,IAAD,EAAS,CAACC,IAAV,EAAkB,CAACC,IAAnB,EAA2B,CAACE,SAA5B,EAAyC,CAACD,QAA9C,CAAwD,CACtD,MAAO,KAAP,CACD,CAFD,IAKK,IACHH,IAAI,EACJC,IADA,EAEAa,sBAAsB,EAAIC,mBAF1B,EAGAD,sBAAsB,CAAGE,mBAJtB,CAKH,CACA,MAAO,KAAP,CACD,CAPI,IAUA,IAAIhB,IAAI,EAAI,CAACC,IAAT,EAAiBa,sBAAsB,EAAIC,mBAA/C,CAAoE,CACvE,MAAO,KAAP,CACD,CAFI,IAKA,IAAId,IAAI,EAAI,CAACD,IAAT,EAAiBc,sBAAsB,CAAGE,mBAA9C,CAAmE,CACtE,MAAO,KAAP,CACD,CAFI,IAMA,IACFC,KAAK,CAACC,OAAN,CAAchB,IAAd,GAAuBA,IAAI,CAACiB,QAAL,CAAcN,eAAd,CAAxB,EACAX,IAAI,GAAKW,eAFN,CAGH,CACA,MAAO,KAAP,CACD,CALI,IAQA,IACFI,KAAK,CAACC,OAAN,CAAcf,QAAd,GAA2BA,QAAQ,CAACgB,QAAT,CAAkBC,sBAASC,EAA3B,CAA5B,EACAlB,QAAQ,GAAKiB,sBAASC,EAFnB,CAGH,CACA,MAAO,KAAP,CACD,CALI,IAOA,IAAIjB,SAAS,GAAKE,gBAAgB,CAACF,SAAnC,CAA8C,CACjD,MAAO,KAAP,CACD,CACD,MAAOP,CAAAA,QAAP,CACD,C,aAEc,gBAAK,sBAAWD,MAAX,CAAL,C","sourcesContent":["import { memo, forwardRef } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(forwardRef(Hidden));\nexport type { IHiddenProps };\n"]}