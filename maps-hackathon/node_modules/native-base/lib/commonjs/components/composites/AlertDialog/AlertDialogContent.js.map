{"version":3,"sources":["AlertDialogContent.tsx"],"names":["AlertDialogContent","props","ref","newProps","React","useContext","AlertDialogContext","contentSize","initialFocusRef","finalFocusRef","handleClose","useEffect","finalRefVal","current","focus"],"mappings":"wUAAA,qDACA,iEACA,qCACA,kCACA,2E,kIAEA,GAAMA,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAmBC,GAAnB,CAAiC,yBAClC,8BAAmB,oBAAnB,CAAyCD,KAAzC,CADkC,CAC/CE,QAD+C,qEAOtDC,eAAMC,UAAN,CAAiBC,2BAAjB,CAPsD,CAGxDC,WAHwD,mBAGxDA,WAHwD,CAIxDC,eAJwD,mBAIxDA,eAJwD,CAKxDC,aALwD,mBAKxDA,aALwD,CAMxDC,WANwD,mBAMxDA,WANwD,CAQ1DN,eAAMO,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,WAAW,CAAGH,aAAa,CAAGA,aAAa,CAACI,OAAjB,CAA2B,IAA1D,CACA,GAAIL,eAAe,EAAIA,eAAe,CAACK,OAAvC,CAAgD,CAE9CL,eAAe,CAACK,OAAhB,CAAwBC,KAAxB,GACD,CAED,MAAO,WAAM,CACX,GAAIF,WAAJ,CAAiB,CAEfA,WAAW,CAACE,KAAZ,GACD,CACF,CALD,CAMD,CAbD,CAaG,CAACN,eAAD,CAAkBC,aAAlB,CAbH,EAgBA,GAAI,iDAAsBR,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,YAAD,0BACMM,WADN,CAEMJ,QAFN,EAGE,GAAG,CAAED,GAHP,CAIE,qBAAqB,CAAEQ,WAJzB,CAME,aAAW,MANb,CAQE,iBAAiB,CAAC,OARpB,CASE,wBAAwB,KAT1B,8EADF,CAaD,CAxCD,C,aA0Ce,gBAAK,sBAAWV,kBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const { ...newProps } = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    let finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]}