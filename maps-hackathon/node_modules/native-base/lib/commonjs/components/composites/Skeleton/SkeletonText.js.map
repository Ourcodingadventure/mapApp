{"version":3,"sources":["SkeletonText.tsx"],"names":["SkeletonText","ref","children","props","space","lineHeight","startColor","endColor","_stack","resolvedProps","computedChildren","i","noOfLines","push","borderRadius","isLoaded","undefined"],"mappings":"wbAAA,qDACA,qCACA,6CACA,iEACA,4D,yHAGA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAGnBC,GAHmB,CAIhB,IAFDC,CAAAA,QAEC,MAFDA,QAEC,CAFYC,KAEZ,kFASC,8BAAmB,cAAnB,CAAmCA,KAAnC,CATD,CAGDC,KAHC,qBAGDA,KAHC,CAIDC,UAJC,qBAIDA,UAJC,CAKDC,UALC,qBAKDA,UALC,CAMDC,QANC,qBAMDA,QANC,CAODC,MAPC,qBAODA,MAPC,CAQEC,aARF,oHAWH,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,aAAa,CAACG,SAAlC,CAA6CD,CAAC,EAA9C,CAAkD,CAEhD,GAAIA,CAAC,GAAKF,aAAa,CAACG,SAAd,CAA0B,CAAhC,EAAqCH,aAAa,CAACG,SAAd,GAA4B,CAArE,CAAwE,CACtEF,gBAAgB,CAACG,IAAjB,CAEE,6BAAC,iBAAD,EACE,YAAY,CACVJ,aAAa,CAACK,YAAd,CAA6BL,aAAa,CAACK,YAA3C,CAA0D,CAF9D,CAIE,QAAQ,CAAEP,QAJZ,CAKE,UAAU,CAAED,UALd,CAME,CAAC,CAAED,UANL,CAOE,CAAC,CAAC,KAPJ,6EAFF,EAYD,CAbD,IAcEK,CAAAA,gBAAgB,CAACG,IAAjB,CACE,6BAAC,iBAAD,EACE,YAAY,CACVJ,aAAa,CAACK,YAAd,CAA6BL,aAAa,CAACK,YAA3C,CAA0D,CAF9D,CAIE,QAAQ,CAAEP,QAJZ,CAKE,UAAU,CAAED,UALd,CAME,CAAC,CAAED,UANL,6EADF,EAUH,CACD,MAAOI,CAAAA,aAAa,CAACM,QAAd,CACLb,QADK,CAGL,6BAAC,YAAD,wBACE,YAAY,CAAEO,aAAa,CAACK,YAAd,CAA6BL,aAAa,CAACK,YAA3C,CAA0D,CAD1E,CAEE,EAAE,CAAE,aAFN,EAGML,aAHN,EAIE,GAAG,CAAER,GAJP,8EAOE,6BAAC,aAAD,wBACE,GAAG,CAAE,CADP,CAEE,IAAI,CAAE,CAFR,CAGE,KAAK,CAAE,CAHT,CAIE,MAAM,CAAE,CAJV,CAKE,QAAQ,CAAC,UALX,CAME,cAAc,CAAEG,KAAK,GAAKY,SAAV,CAAsB,eAAtB,CAAwC,YAN1D,CAOE,KAAK,CAAEZ,KAPT,EASMI,MATN,EAUE,QAAQ,CAAC,QAVX,8EAYGE,gBAZH,CAPF,CAqBGR,QAAQ,CAAG,6BAAC,YAAD,EAAK,OAAO,CAAE,CAAd,8EAAkBA,QAAlB,CAAH,CAAuC,IArBlD,CAHF,CA2BD,CAvED,C,aAyEe,gBAAK,sBAAWF,YAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { VStack } from '../../primitives/Stack';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  { children, ...props }: IBoxProps & ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    space,\n    lineHeight,\n    startColor,\n    endColor,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < resolvedProps.noOfLines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === resolvedProps.noOfLines - 1 && resolvedProps.noOfLines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          borderRadius={\n            resolvedProps.borderRadius ? resolvedProps.borderRadius : 3\n          }\n          endColor={endColor}\n          startColor={startColor}\n          h={lineHeight}\n          w=\"75%\"\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          borderRadius={\n            resolvedProps.borderRadius ? resolvedProps.borderRadius : 3\n          }\n          endColor={endColor}\n          startColor={startColor}\n          h={lineHeight}\n        />\n      );\n  }\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box\n      borderRadius={resolvedProps.borderRadius ? resolvedProps.borderRadius : 3}\n      bg={'transparent'}\n      {...resolvedProps}\n      ref={ref}\n    >\n      {/* populating computed children with given space */}\n      <VStack\n        top={0}\n        left={0}\n        right={0}\n        bottom={0}\n        position=\"absolute\"\n        justifyContent={space === undefined ? 'space-between' : 'flex-start'}\n        space={space}\n        // spreading props specific for VStack\n        {..._stack}\n        overflow=\"hidden\"\n      >\n        {computedChildren}\n      </VStack>\n      {children ? <Box opacity={0}>{children}</Box> : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]}