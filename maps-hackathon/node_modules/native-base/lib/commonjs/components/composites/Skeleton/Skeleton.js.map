{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","props","ref","isDomUsable","children","startColor","style","endColor","resolvedProps","blinkAnim","React","useRef","Animated","Value","current","tokenisedRadius","borderRadius","tokenisedStartColor","useEffect","blink","sequence","timing","toValue","duration","fadeDuration","speed","useNativeDriver","Platform","OS","loop","start","skeletonStyle","skeleton","position","top","bottom","height","width","backgroundColor","opacity","isLoaded"],"mappings":"wbAAA,qDACA,yCACA,qCACA,qCACA,iEAEA,2EACA,iD,qHAEA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAwBC,GAAxB,CAAqC,CACpD,GAAMC,CAAAA,WAAW,CAAG,sBAApB,CADoD,wBAQhD,8BAAmB,UAAnB,CAA+BF,KAA/B,CARgD,CAGlDG,QAHkD,qBAGlDA,QAHkD,CAIlDC,UAJkD,qBAIlDA,UAJkD,CAKlDC,KALkD,qBAKlDA,KALkD,CAMlDC,QANkD,qBAMlDA,QANkD,CAO/CC,aAP+C,yGAUpD,GAAMC,CAAAA,SAAS,CAAGC,eAAMC,MAAN,CAAa,GAAIC,uBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAtD,CACA,GAAMC,CAAAA,eAAe,CAAG,uBAAS,OAAT,CAAkBP,aAAa,CAACQ,YAAhC,CAAxB,CACA,GAAMC,CAAAA,mBAAmB,CAAG,uBAAS,QAAT,CAAmBZ,UAAnB,CAA5B,CAGAK,eAAMQ,SAAN,CAAgB,UAAM,CAEpB,GAAIf,WAAJ,CAAiB,CACf,GAAMgB,CAAAA,KAAK,CAAGP,sBAASQ,QAAT,CAAkB,CAC9BR,sBAASS,MAAT,CAAgBZ,SAAhB,CAA2B,CACzBa,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CACNf,aAAa,CAACgB,YAAd,CAA6B,KAA7B,EAAsC,EAAIhB,aAAa,CAACiB,KAAxD,CAHuB,CAIzBC,eAAe,CAAEC,sBAASC,EAAT,GAAgB,KAJR,CAA3B,CAD8B,CAO9BhB,sBAASS,MAAT,CAAgBZ,SAAhB,CAA2B,CACzBa,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CACNf,aAAa,CAACgB,YAAd,CAA6B,KAA7B,EAAsC,EAAIhB,aAAa,CAACiB,KAAxD,CAHuB,CAIzBC,eAAe,CAAEC,sBAASC,EAAT,GAAgB,KAJR,CAA3B,CAP8B,CAAlB,CAAd,CAcAhB,sBAASiB,IAAT,CAAcV,KAAd,EAAqBW,KAArB,GACD,CACF,CAnBD,CAmBG,CAACrB,SAAD,CAAYN,WAAZ,CAAyBK,aAAzB,CAnBH,EAqBA,GAAMuB,CAAAA,aAAkB,CAAG,CACzBC,QAAQ,CAAE,CACRC,QAAQ,CAAE,UADF,CAERC,GAAG,CAAE,CAFG,CAGRC,MAAM,CAAE,CAHA,CAIRC,MAAM,CAAE,MAJA,CAKRC,KAAK,CAAE,MALC,CAMRrB,YAAY,CAAED,eANN,CAORuB,eAAe,CAAErB,mBAPT,CAQRsB,OAAO,CAAE9B,SARD,CADe,CAA3B,CAaA,GAAI,iDAAsBR,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAOO,CAAAA,aAAa,CAACgC,QAAd,CACLpC,QADK,CAGL,6BAAC,YAAD,wBACE,KAAK,CAAE,CAACE,KAAD,CADT,CAEE,YAAY,CAAES,eAFhB,CAGE,EAAE,CAAER,QAHN,EAIMC,aAJN,EAKE,GAAG,CAAEN,GALP,8EAOE,6BAAC,qBAAD,CAAU,IAAV,EAAe,KAAK,CAAE6B,aAAa,CAACC,QAApC,6EAPF,CASG5B,QAAQ,CAAG,6BAAC,iBAAD,EAAM,KAAK,CAAE,CAAEmC,OAAO,CAAE,CAAX,CAAb,8EAA8BnC,QAA9B,CAAH,CAAoD,IAT/D,CAHF,CAeD,CAnED,C,aAqEe,gBAAK,sBAAWJ,QAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    style,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedRadius = useToken('radii', resolvedProps.borderRadius);\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: tokenisedRadius,\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box\n      style={[style]}\n      borderRadius={tokenisedRadius}\n      bg={endColor}\n      {...resolvedProps}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {/* Rendering children with 0 opacity (takes height of children incase children are present) */}\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]}