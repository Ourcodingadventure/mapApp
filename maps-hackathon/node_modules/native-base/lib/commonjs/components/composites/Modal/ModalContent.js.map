{"version":3,"sources":["ModalContent.tsx"],"names":["ModalContent","props","ref","resolvedProps","React","useContext","ModalContext","contentSize","initialFocusRef","finalFocusRef","handleClose","useEffect","finalRefVal","current","focus","Platform","OS","undefined"],"mappings":"wUAAA,qDACA,iEACA,qCACA,kCACA,yCACA,2E,sHAEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAmBC,GAAnB,CAAiC,CACpD,GAAMC,CAAAA,aAAa,CAAG,8BAAmB,cAAnB,CAAmCF,KAAnC,CAAtB,CADoD,sBAOhDG,eAAMC,UAAN,CAAiBC,qBAAjB,CAPgD,CAGlDC,WAHkD,mBAGlDA,WAHkD,CAIlDC,eAJkD,mBAIlDA,eAJkD,CAKlDC,aALkD,mBAKlDA,aALkD,CAMlDC,WANkD,mBAMlDA,WANkD,CAQpDN,eAAMO,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,WAAW,CAAGH,aAAa,CAAGA,aAAa,CAACI,OAAjB,CAA2B,IAA5D,CACA,GAAIL,eAAe,EAAIA,eAAe,CAACK,OAAvC,CAAgD,CAE9CL,eAAe,CAACK,OAAhB,CAAwBC,KAAxB,GACD,CAED,MAAO,WAAM,CACX,GAAIF,WAAJ,CAAiB,CAEfA,WAAW,CAACE,KAAZ,GACD,CACF,CALD,CAMD,CAbD,CAaG,CAACN,eAAD,CAAkBC,aAAlB,CAbH,EAgBA,GAAI,iDAAsBR,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,YAAD,0BACMM,WADN,CAEMJ,aAFN,EAGE,GAAG,CAAED,GAHP,CAIE,qBAAqB,CAAEQ,WAJzB,CAME,aAAW,MANb,CAQE,iBAAiB,CAAEK,sBAASC,EAAT,GAAgB,KAAhB,CAAwB,QAAxB,CAAmCC,SARxD,CASE,wBAAwB,KAT1B,8EADF,CAaD,CAxCD,C,aA0Ce,gBAAK,sBAAWjB,YAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]}