{"version":3,"sources":["index.tsx"],"names":["IconButton","ref","icon","children","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","React","cloneElement"],"mappings":"wbAAA,qDACA,qDACA,2CACA,2DACA,2EACA,qCAEA,gE,oHAMA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAEjBC,GAFiB,CAGd,IAFDC,CAAAA,IAEC,MAFDA,IAEC,CAFKC,QAEL,MAFKA,QAEL,CAFkBC,KAElB,+EAC+B,0BAD/B,CACKC,UADL,WACKA,UADL,CACiBC,SADjB,WACiBA,SADjB,mBAEmC,8BAFnC,CAEKC,cAFL,eAEKA,cAFL,CAEqBC,SAFrB,eAEqBA,SAFrB,eAG+B,0BAH/B,CAGKC,UAHL,WAGKA,UAHL,CAGiBC,SAHjB,WAGiBA,SAHjB,yBAcC,sCAAmB,YAAnB,CAAiCN,KAAjC,CAAwC,CAC1CE,SAAS,CAATA,SAD0C,CAE1CE,SAAS,CAATA,SAF0C,CAG1CE,SAAS,CAATA,SAH0C,CAAxC,CAdD,CAMDC,KANC,qBAMDA,KANC,CAODC,SAPC,qBAODA,SAPC,CAQDC,UARC,qBAQDA,UARC,CASDC,SATC,qBASDA,SATC,CAUDC,UAVC,qBAUDA,UAVC,CAWDC,OAXC,qBAWDA,OAXC,CAYDC,MAZC,qBAYDA,MAZC,CAaEC,aAbF,2IAoBH,GAAIC,CAAAA,UAAJ,CACA,GAAIjB,IAAJ,CAAU,CACRiB,UAAU,CAAGC,eAAMC,YAAN,CAAmBnB,IAAnB,0BACRS,KADQ,EAAb,CAGD,CAGD,GAAI,iDAAsBP,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,oBAAD,wBACE,iBAAiB,CAAC,QADpB,CAEE,GAAG,CAAEH,GAFP,CAGE,SAAS,CAAE,gCAAqBW,SAArB,CAAgCL,cAAc,CAACK,SAA/C,CAHb,CAIE,UAAU,CAAE,gCAAqBC,UAArB,CAAiCN,cAAc,CAACM,UAAhD,CAJd,CAME,SAAS,CAAE,gCAAqBC,SAArB,CAAgCT,UAAU,CAACS,SAA3C,CANb,CAQE,UAAU,CAAE,gCAAqBC,UAArB,CAAiCV,UAAU,CAACU,UAA5C,CARd,CAUE,OAAO,CAAE,gCACP,gCAAqBC,OAArB,CAA8BP,UAAU,CAACO,OAAzC,CADO,CAVX,CAeE,MAAM,CAAE,gCACN,gCAAqBC,MAArB,CAA6BR,UAAU,CAACQ,MAAxC,CADM,CAfV,EAmBMC,aAnBN,+EAqBGC,UAAU,EAAI,6BAAC,UAAD,0BAAUR,KAAV,gFAAkBR,QAAlB,CArBjB,CADF,CAyBD,CA5DD,C,aA8De,gBAAK,sBAAWH,UAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\n\nconst IconButton = (\n  { icon, children, ...props }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}