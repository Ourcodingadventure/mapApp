{"version":3,"sources":["AlertIcon.tsx"],"names":["AlertIcon","ref","children","props","newProps","React","useContext","AlertContext","status","_icon","getIcon"],"mappings":"wbAAA,qDACA,4CACA,kDAOA,2DACA,kCACA,iDACA,2E,mHAEA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAA0CC,GAA1C,CAAwD,IAArDC,CAAAA,QAAqD,MAArDA,QAAqD,CAAxCC,KAAwC,0DACxE,GAAIC,CAAAA,QAAQ,CAAG,sCAAmB,WAAnB,CAAgCD,KAAhC,CAAf,CACAC,QAAQ,CAAG,yBAAcA,QAAd,CAAX,CAFwE,sBAG/BC,eAAMC,UAAN,CAAiBC,qBAAjB,CAH+B,CAGhEC,MAHgE,mBAGhEA,MAHgE,CAGxDC,KAHwD,mBAGxDA,KAHwD,CAIxE,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,OAAQF,MAAR,EACE,IAAK,OAAL,CACE,MAAO,8BAAC,qBAAD,0BAAoBC,KAApB,CAA+BL,QAA/B,EAAyC,GAAG,CAAEH,GAA9C,+EAAP,CACF,IAAK,SAAL,CACE,MAAO,8BAAC,kBAAD,0BAAiBQ,KAAjB,CAA4BL,QAA5B,EAAsC,GAAG,CAAEH,GAA3C,+EAAP,CACF,IAAK,SAAL,CACE,MAAO,8BAAC,sBAAD,0BAAqBQ,KAArB,CAAgCL,QAAhC,EAA0C,GAAG,CAAEH,GAA/C,+EAAP,CACF,QACE,MAAO,8BAAC,eAAD,0BAAcQ,KAAd,CAAyBL,QAAzB,EAAmC,GAAG,CAAEH,GAAxC,+EAAP,CARJ,CAUD,CAXD,CAaA,GAAI,iDAAsBE,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAO,8BAAC,eAAD,+EAAMD,QAAQ,EAAIQ,OAAO,EAAzB,CAAP,CACD,CArBD,C,aAsBe,gBAAK,sBAAWV,SAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport {\n  WarningIcon,\n  WarningTwoIcon,\n  InfoIcon,\n  CheckCircleIcon,\n} from '../../primitives/Icon/Icons';\nimport type { IAlertContext, IAlertIconProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertIcon = ({ children, ...props }: IAlertIconProps, ref?: any) => {\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const { status, _icon }: IAlertContext = React.useContext(AlertContext);\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return <WarningTwoIcon {..._icon} {...newProps} ref={ref} />;\n      case 'warning':\n        return <WarningIcon {..._icon} {...newProps} ref={ref} />;\n      case 'success':\n        return <CheckCircleIcon {..._icon} {...newProps} ref={ref} />;\n      default:\n        return <InfoIcon {..._icon} {...newProps} ref={ref} />;\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box>{children || getIcon()}</Box>;\n};\nexport default memo(forwardRef(AlertIcon));\n"]}