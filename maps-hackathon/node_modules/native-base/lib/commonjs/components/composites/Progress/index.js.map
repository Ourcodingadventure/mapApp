{"version":3,"sources":["index.tsx"],"names":["Progress","props","ref","min","max","value","_filledTrack","children","resolvedProps","now"],"mappings":"wbAAA,qDACA,4CACA,2DACA,2E,kHA0CA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAwBC,GAAxB,CAAsC,yBAQjD,sCAAmB,UAAnB,CAA+BD,KAA/B,CARiD,CAEnDE,GAFmD,qBAEnDA,GAFmD,CAGnDC,GAHmD,qBAGnDA,GAHmD,CAInDC,KAJmD,qBAInDA,KAJmD,CAKnDC,YALmD,qBAKnDA,YALmD,CAMnDC,QANmD,qBAMnDA,QANmD,CAOhDC,aAPgD,4GAWrD,GAAI,iDAAsBP,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,eAAD,0BACMO,aADN,EAEE,GAAG,CAAEN,GAFP,CAGE,UAAU,KAHZ,CAIE,iBAAiB,CAAC,aAJpB,CAKE,kBAAkB,CAAE,CAClBC,GAAG,CAAEA,GADa,CAElBC,GAAG,CAAEA,GAFa,CAGlBK,GAAG,CACDJ,KAAK,CAAGD,GAAR,EAAeC,KAAK,CAAGF,GAAvB,CACK,CAACE,KAAK,CAAGF,GAAT,GAAiBC,GAAG,CAAGD,GAAvB,CAAD,CAAgC,GADpC,CAEIE,KAAK,CAAGF,GAAR,CACA,GADA,CAEA,CARY,CALtB,8EAgBE,6BAAC,eAAD,0BAEMG,YAFN,EAGE,CAAC,CACCD,KAAK,CAAGD,GAAR,EAAeC,KAAK,CAAGF,GAAvB,CACK,CAACE,KAAK,CAAGF,GAAT,GAAiBC,GAAG,CAAGD,GAAvB,CAAD,CAAgC,GAAhC,CAAsC,GAD1C,CAEIE,KAAK,CAAGF,GAAR,CACA,MADA,CAEA,IARR,8EAWGI,QAXH,CAhBF,CADF,CAgCD,CA/CD,C,aAiDe,gBAAK,sBAAWP,QAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, IBoxProps } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue } from '../../../components/types';\nimport type { ISizes } from '../../../theme/base/sizes';\n\nexport interface IProgressProps extends IBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ResponsiveValue<ISizes | (string & {}) | number>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: string;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: IBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now:\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100\n            : value > min\n            ? 100\n            : 0,\n      }}\n    >\n      <Box\n        // {...resolvedProps}\n        {..._filledTrack}\n        w={\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100 + '%'\n            : value > min\n            ? '100%'\n            : '0%'\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]}