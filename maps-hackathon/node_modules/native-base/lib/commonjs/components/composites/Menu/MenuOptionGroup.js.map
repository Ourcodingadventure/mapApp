{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["MenuOptionContext","React","createContext","values","onChange","_val","type","MenuOptionGroup","ref","defaultValue","value","props","internalDefaultValue","Array","isArray","useState","internalValues","setValues","newValue","newValues","includes","splice","indexOf","push"],"mappings":"kpBAAA,qDACA,8DAEA,2E,wHAEO,GAAMA,CAAAA,iBAAiB,CAAGC,eAAMC,aAAN,CAA6C,CAC5EC,MAAM,CAAE,EADoE,CAE5EC,QAAQ,CAAE,kBAACC,IAAD,CAAU,CAAE,CAFsD,CAG5EC,IAAI,CAAE,UAHsE,CAA7C,CAA1B,C,4CAMP,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAEtBC,GAFsB,CAGnB,IAFDF,CAAAA,IAEC,MAFDA,IAEC,CAFKG,YAEL,MAFKA,YAEL,CAFmBC,KAEnB,MAFmBA,KAEnB,CAF0BN,QAE1B,MAF0BA,QAE1B,CAFuCO,KAEvC,wFACH,GAAMC,CAAAA,oBAAoB,CAAGH,YAAY,CACrCI,KAAK,CAACC,OAAN,CAAcL,YAAd,EACEA,YADF,CAEE,CAACA,YAAD,CAHmC,CAIrC,EAJJ,CADG,oBAOiCR,eAAMc,QAAN,CAClCH,oBADkC,CAPjC,iEAOII,cAPJ,qBAOoBC,SAPpB,qBAUHb,QAAQ,CAAG,kBAACc,QAAD,CAA+B,CACxC,GAAIZ,IAAI,GAAK,UAAb,CAAyB,CACvB,GAAMa,CAAAA,SAAS,iCAAOH,cAAP,CAAf,CACA,GAAIA,cAAc,CAACI,QAAf,CAAwBF,QAAxB,CAAJ,CAAuC,CACrCC,SAAS,CAACE,MAAV,CAAiBF,SAAS,CAACG,OAAV,CAAkBJ,QAAlB,CAAjB,CAA8C,CAA9C,EACAD,SAAS,CAACE,SAAD,CAAT,CACD,CAHD,IAGO,CACLA,SAAS,CAACI,IAAV,CAAeL,QAAf,EACAD,SAAS,CAACE,SAAD,CAAT,CACD,CACF,CATD,IASO,IAAIb,IAAI,GAAK,OAAb,CAAsB,CAC3BW,SAAS,CAAC,CAACC,QAAD,CAAD,CAAT,CACD,CACF,CAbD,CAeA,GAAI,iDAAsBP,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,iBAAD,CAAmB,QAAnB,EACE,KAAK,CAAE,CACLR,MAAM,CAAE,CAACO,KAAD,CACJM,cADI,CAEJH,KAAK,CAACC,OAAN,CAAcJ,KAAd,EACAA,KADA,CAEA,CAACA,KAAD,CALC,CAMLN,QAAQ,CAARA,QANK,CAOLE,IAAI,CAAJA,IAPK,CADT,6EAWE,6BAAC,kBAAD,0BAAeK,KAAf,EAAsB,GAAG,CAAEH,GAA3B,8EAXF,CADF,CAeD,CA9CD,C,aAgDe,gBAAK,sBAAWD,eAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nconst MenuOptionGroup = (\n  { type, defaultValue, value, onChange, ...props }: IMenuOptionGroupProps,\n  ref?: any\n) => {\n  const internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  const [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      const newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n    } else if (type === 'radio') {\n      setValues([newValue]);\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} ref={ref} />\n    </MenuOptionContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(MenuOptionGroup));\n"]}