{"version":3,"sources":["utils.ts"],"names":["extractProps","props","theme","colorModeProps","componentTheme","currentBreakpoint","newProps","property","themePropertyMap","propValues","extractPropertyFromFunction","nestedProp","shadowProps","resolveValueWithBreakpoint","breakpoints","filterDefaultProps","defaultProps","Object","keys","resultProps","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","bg","backgroundColor","textColor","color","values","breakpointTheme","calculateProps","windowWidth","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          props[property]\n        ];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]}