{"version":3,"sources":["useResponsiveSSRProps.ts"],"names":["useResponsiveSSRProps","incomingProps","modified","setModified","responsivePropsExists","isSSR","modifiedProps","key","Math","random"],"mappings":"4WAAA,4BACA,4DACA,qCAEO,QAASA,CAAAA,qBAAT,CAA+BC,aAA/B,CAAmD,eACxB,oBAAS,KAAT,CADwB,qDACjDC,QADiD,eACvCC,WADuC,eAGxD,GAAMC,CAAAA,qBAAqB,CAAG,+BAAoBH,aAApB,CAA9B,CACA,GAAMI,CAAAA,KAAK,CAAG,2CAAoB,4BAApB,EAAkDA,KAAhE,CAEA,GAAIC,CAAAA,aAAa,CAAGL,aAApB,CACA,GAAIG,qBAAqB,EAAIC,KAAzB,EAAkC,CAACH,QAAvC,CAAiD,CAC/CI,aAAa,0BAAQA,aAAR,EAAuBC,GAAG,CAAEC,IAAI,CAACC,MAAL,EAA5B,EAAb,CACD,CACD,qBAAU,UAAW,CACnB,GAAIL,qBAAqB,EAAIC,KAA7B,CAAoC,CAClCF,WAAW,CAAC,IAAD,CAAX,CACD,CACF,CAJD,CAIG,CAACC,qBAAD,CAAwBC,KAAxB,CAJH,EAMA,MAAOC,CAAAA,aAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nexport function useResponsiveSSRProps(incomingProps: any) {\n  const [modified, setModified] = useState(false);\n\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  let modifiedProps = incomingProps;\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps, key: Math.random() };\n  }\n  useEffect((): any => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n\n  return modifiedProps;\n}\n"]}