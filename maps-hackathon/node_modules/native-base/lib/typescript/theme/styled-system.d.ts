export declare const getColor: (rawValue: any, scale: any, theme: any) => any;
export declare const layout: {
    width: {
        property: string;
        scale: string;
    };
    w: {
        property: string;
        scale: string;
    };
    height: {
        property: string;
        scale: string;
    };
    h: {
        property: string;
        scale: string;
    };
    minWidth: {
        property: string;
        scale: string;
    };
    minW: {
        property: string;
        scale: string;
    };
    minHeight: {
        property: string;
        scale: string;
    };
    minH: {
        property: string;
        scale: string;
    };
    maxWidth: {
        property: string;
        scale: string;
    };
    maxW: {
        property: string;
        scale: string;
    };
    maxHeight: {
        property: string;
        scale: string;
    };
    maxH: {
        property: string;
        scale: string;
    };
    size: {
        properties: string[];
        scale: string;
    };
    boxSize: {
        properties: string[];
        scale: string;
    };
    overflow: boolean;
    overflowX: boolean;
    overflowY: boolean;
    display: boolean;
    verticalAlign: boolean;
};
export declare const flexbox: {
    alignItems: boolean;
    alignContent: boolean;
    justifyItems: boolean;
    justifyContent: boolean;
    flexWrap: boolean;
    flexDirection: boolean;
    flexDir: {
        property: string;
    };
    flex: boolean;
    flexGrow: boolean;
    flexShrink: boolean;
    flexBasis: boolean;
    justifySelf: boolean;
    alignSelf: boolean;
    order: boolean;
};
export declare const position: {
    position: boolean;
    zIndex: {
        property: string;
        scale: string;
    };
    top: {
        property: string;
        scale: string;
    };
    right: {
        property: string;
        scale: string;
    };
    bottom: {
        property: string;
        scale: string;
    };
    left: {
        property: string;
        scale: string;
    };
};
export declare const color: {
    color: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    backgroundColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    opacity: {
        property: string;
        scale: string;
    };
    bg: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    bgColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
};
export declare const border: {
    border: {
        property: string;
        scale: string;
    };
    borderWidth: {
        property: string;
        scale: string;
    };
    borderStyle: {
        property: string;
        scale: string;
    };
    borderColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    borderRadius: {
        property: string;
        scale: string;
    };
    borderTop: {
        property: string;
        scale: string;
    };
    borderTopRadius: {
        properties: string[];
        scale: string;
    };
    borderLeftRadius: {
        properties: string[];
        scale: string;
    };
    borderRightRadius: {
        properties: string[];
        scale: string;
    };
    borderTopLeftRadius: {
        property: string;
        scale: string;
    };
    borderTopRightRadius: {
        property: string;
        scale: string;
    };
    borderRight: {
        property: string;
        scale: string;
    };
    borderBottom: {
        property: string;
        scale: string;
    };
    borderBottomLeftRadius: {
        property: string;
        scale: string;
    };
    borderBottomRightRadius: {
        property: string;
        scale: string;
    };
    borderLeft: {
        property: string;
        scale: string;
    };
    borderX: {
        properties: string[];
        scale: string;
    };
    borderY: {
        properties: string[];
        scale: string;
    };
    borderTopWidth: {
        property: string;
        scale: string;
    };
    borderTopColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    borderTopStyle: {
        property: string;
        scale: string;
    };
    borderBottomWidth: {
        property: string;
        scale: string;
    };
    borderBottomColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    borderBottomStyle: {
        property: string;
        scale: string;
    };
    borderLeftWidth: {
        property: string;
        scale: string;
    };
    borderLeftColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    borderLeftStyle: {
        property: string;
        scale: string;
    };
    borderRightWidth: {
        property: string;
        scale: string;
    };
    borderRightColor: {
        property: string;
        scale: string;
        transformer: (rawValue: any, scale: any, theme: any) => any;
    };
    borderRightStyle: {
        property: string;
        scale: string;
    };
    rounded: {
        property: string;
        scale: string;
    };
    roundedTopLeft: {
        property: string;
        scale: string;
    };
    roundedTopRight: {
        property: string;
        scale: string;
    };
    roundedBottomLeft: {
        property: string;
        scale: string;
    };
    roundedBottomRight: {
        property: string;
        scale: string;
    };
    roundedTop: {
        properties: string[];
        scale: string;
    };
    borderBottomRadius: {
        properties: string[];
        scale: string;
    };
    roundedBottom: {
        properties: string[];
        scale: string;
    };
    roundedLeft: {
        properties: string[];
        scale: string;
    };
    roundedRight: {
        properties: string[];
        scale: string;
    };
};
export declare const background: {
    backgroundSize: boolean;
    backgroundPosition: boolean;
    backgroundRepeat: boolean;
    backgroundAttachment: boolean;
    backgroundBlendMode: boolean;
    bgImage: {
        property: string;
    };
    bgImg: {
        property: string;
    };
    bgBlendMode: {
        property: string;
    };
    bgSize: {
        property: string;
    };
    bgPosition: {
        property: string;
    };
    bgPos: {
        property: string;
    };
    bgRepeat: {
        property: string;
    };
    bgAttachment: {
        property: string;
    };
};
export declare const space: {
    margin: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    m: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginTop: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    mt: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginRight: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    mr: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginBottom: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    mb: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginLeft: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    ml: {
        property: string;
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginX: {
        properties: string[];
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    mx: {
        properties: string[];
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    marginY: {
        properties: string[];
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    my: {
        properties: string[];
        scale: string;
        transformer: (n: any, scale: any) => any;
    };
    padding: {
        property: string;
        scale: string;
    };
    p: {
        property: string;
        scale: string;
    };
    paddingTop: {
        property: string;
        scale: string;
    };
    pt: {
        property: string;
        scale: string;
    };
    paddingRight: {
        property: string;
        scale: string;
    };
    pr: {
        property: string;
        scale: string;
    };
    paddingBottom: {
        property: string;
        scale: string;
    };
    pb: {
        property: string;
        scale: string;
    };
    paddingLeft: {
        property: string;
        scale: string;
    };
    pl: {
        property: string;
        scale: string;
    };
    paddingX: {
        properties: string[];
        scale: string;
    };
    px: {
        properties: string[];
        scale: string;
    };
    paddingY: {
        properties: string[];
        scale: string;
    };
    py: {
        properties: string[];
        scale: string;
    };
};
export declare const typography: {
    fontFamily: {
        property: string;
        scale: string;
    };
    fontSize: {
        property: string;
        scale: string;
    };
    fontWeight: {
        property: string;
        scale: string;
        transformer: (val: any, scale: any) => any;
    };
    lineHeight: {
        property: string;
        scale: string;
    };
    letterSpacing: {
        property: string;
        scale: string;
    };
    textAlign: boolean;
    fontStyle: boolean;
    wordBreak: boolean;
    overflowWrap: boolean;
    textOverflow: boolean;
    textTransform: boolean;
    whiteSpace: boolean;
    textDecoration: {
        property: string;
    };
    txtDecor: {
        property: string;
    };
    textDecorationLine: boolean;
};
export declare const getStyleAndFilteredProps: ({ style, theme, debug, currentBreakpoint, strictMode, ...props }: any) => {
    styleSheet: {
        box: any;
    };
    restProps: any;
};
