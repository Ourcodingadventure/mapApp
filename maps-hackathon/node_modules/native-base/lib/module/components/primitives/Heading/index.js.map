{"version":3,"sources":["index.tsx"],"names":["Heading","props","ref","resolvedProps"],"mappings":"wUAAA,qDACA,qDACA,2DAEA,2E,iHAEA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAoC,CAClD,GAAMC,CAAAA,aAAa,CAAG,sCAAmB,SAAnB,CAA8BF,KAA9B,CAAtB,CAEA,GAAI,iDAAsBA,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAO,8BAAC,aAAD,0BAAUE,aAAV,EAAyB,GAAG,CAAED,GAA9B,+EAAP,CACD,CAPD,C,aASe,gBAAK,sBAAWF,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IHeadingProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Heading = (props: IHeadingProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Heading', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Text {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(Heading));\nexport type { IHeadingProps };\n"]}