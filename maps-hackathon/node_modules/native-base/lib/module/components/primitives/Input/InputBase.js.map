{"version":3,"sources":["InputBase.tsx"],"names":["StyledInput","TextInput","InputBase","ref","onKeyPress","onFocus","onBlur","disableFocusHandling","inputProps","wrapperRef","props","React","useState","isFocused","setIsFocused","handleFocus","focusState","callback","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","_ref","useRef","isHovered","isFullWidth","ariaLabel","accessibilityLabel","placeholderTextColor","selectionColor","underlineColorAndroid","type","fontFamily","fontWeight","fontStyle","resolvedProps","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","undefined","e","persist","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { TextInput, Platform } from 'react-native';\nimport type { IInputProps } from './types';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst InputBase = (\n  {\n    onKeyPress,\n    onFocus,\n    onBlur,\n    disableFocusHandling,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    disableFocusHandling?: boolean;\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    ariaLabel,\n    accessibilityLabel,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    type,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered,\n      isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      onKeyPress,\n      onFocus,\n      onBlur,\n      disableFocusHandling,\n      inputProps,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledInput\n      {...inputProps}\n      {...resolvedFontFamily}\n      secureTextEntry={type === 'password'}\n      accessible\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      editable={isDisabled || isReadOnly ? false : true}\n      w={isFullWidth ? '100%' : undefined}\n      {...resolvedProps}\n      placeholderTextColor={resolvedPlaceholderTextColor}\n      selectionColor={resolvedSelectionColor}\n      underlineColorAndroid={resolvedUnderlineColorAndroid}\n      onKeyPress={(e: any) => {\n        e.persist();\n        onKeyPress && onKeyPress(e);\n      }}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // TODO: this can be moved to baseStyle using _web\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      ref={mergeRefs([ref, _ref, wrapperRef])}\n    />\n  );\n};\n\nexport default memo(forwardRef(InputBase));\n"]}