{"version":3,"sources":["index.tsx"],"names":["Spinner","props","ref","color","size","resolvedProps","resolvedColor","colors"],"mappings":"wbAAA,qDACA,yCACA,2DACA,qCAEA,2EACA,qC,iHAEA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAoC,yBACR,sCACxC,SADwC,CAExCD,KAFwC,CADQ,CAC1CE,KAD0C,qBAC1CA,KAD0C,CACnCC,IADmC,qBACnCA,IADmC,CAC1BC,aAD0B,6EAKlD,GAAMC,CAAAA,aAAa,CAAG,oBAASH,KAAT,CAAgB,sBAAWI,MAA3B,CAAmC,qBAAnC,CAAtB,CAEA,GAAI,iDAAsBN,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,8BAAD,wBACE,UAAU,KADZ,CAEE,kBAAkB,CAAC,SAFrB,EAGMI,aAHN,EAIE,KAAK,CAAEC,aAJT,CAKE,GAAG,CAAEJ,GALP,CAME,IAAI,CAAEE,IANR,8EADF,CAUD,CApBD,C,aAsBe,gBAAK,sBAAWJ,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ActivityIndicator\n      accessible\n      accessibilityLabel=\"loading\"\n      {...resolvedProps}\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]}