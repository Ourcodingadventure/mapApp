{"version":3,"sources":["SliderTrack.tsx"],"names":["SliderTrack","ref","children","props","React","useContext","SliderContext","orientation","trackProps","onTrackLayout","colorScheme","sliderSize","isReadOnly","isDisabled","resolvedProps","size","isVertical","trackStyle","useMemo","height","width","undefined","forwardRef"],"mappings":"mWAAA,oDACA,2DACA,uCACA,mDACA,kCACA,2E,sHAGA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAA4CC,GAA5C,CAA0D,IAAvDC,CAAAA,QAAuD,MAAvDA,QAAuD,CAA1CC,KAA0C,gFASxEC,eAAMC,UAAN,CAAiBC,sBAAjB,CATwE,CAE1EC,WAF0E,mBAE1EA,WAF0E,CAG1EC,UAH0E,mBAG1EA,UAH0E,CAI1EC,aAJ0E,mBAI1EA,aAJ0E,CAK1EC,WAL0E,mBAK1EA,WAL0E,CAM1EC,UAN0E,mBAM1EA,UAN0E,CAO1EC,UAP0E,mBAO1EA,UAP0E,CAQ1EC,UAR0E,mBAQ1EA,UAR0E,CAW5E,GAAMC,CAAAA,aAAa,CAAG,sCACpB,aADoB,wBAGlBC,IAAI,CAAEJ,UAHY,CAIlBD,WAAW,CAAXA,WAJkB,EAKfP,KALe,EAOpB,CAAES,UAAU,CAAVA,UAAF,CAAcC,UAAU,CAAVA,UAAd,CAPoB,CAAtB,CAUA,GAAMG,CAAAA,UAAU,CAAGT,WAAW,GAAK,UAAnC,CAEA,GAAMU,CAAAA,UAAU,CAAGb,eAAMc,OAAN,CACjB,iBAAO,CACLC,MAAM,CAAEH,UAAU,CAAG,MAAH,CAAYF,aAAa,CAACC,IADvC,CAELK,KAAK,CAAE,CAACJ,UAAD,CAAc,MAAd,CAAuBF,aAAa,CAACC,IAFvC,CAAP,EADiB,CAKjB,CAACC,UAAD,CAAaF,aAAa,CAACC,IAA3B,CALiB,CAAnB,CASA,GAAI,iDAAsBZ,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,oBAAD,wBACE,QAAQ,CAAEM,aADZ,CAEE,GAAG,CAAER,GAFP,EAGMO,UAHN,CAIMS,UAJN,EAKE,QAAQ,CAAE,CAACD,UAAD,CAAc,MAAd,CAAuBK,SALnC,CAME,QAAQ,CAAEL,UAAU,CAAG,MAAH,CAAYK,SANlC,CAOE,cAAc,CAAC,QAPjB,CAQE,UAAU,CAAC,QARb,8EAUE,6BAAC,YAAD,0BAASP,aAAT,EAAwB,KAAK,CAAEG,UAA/B,8EACGf,QADH,CAVF,CADF,CAgBD,CApDD,C,aAsDeE,eAAMkB,UAAN,CAAiBtB,WAAjB,C","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../Pressable';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISliderTrackProps } from './types';\n\nconst SliderTrack = ({ children, ...props }: ISliderTrackProps, ref?: any) => {\n  const {\n    orientation,\n    trackProps,\n    onTrackLayout,\n    colorScheme,\n    sliderSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n\n  const resolvedProps = usePropsResolution(\n    'SliderTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      ...props,\n    },\n    { isReadOnly, isDisabled }\n  );\n\n  const isVertical = orientation === 'vertical';\n\n  const trackStyle = React.useMemo(\n    () => ({\n      height: isVertical ? '100%' : resolvedProps.size,\n      width: !isVertical ? '100%' : resolvedProps.size,\n    }),\n    [isVertical, resolvedProps.size]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      onLayout={onTrackLayout}\n      ref={ref}\n      {...trackProps}\n      {...trackStyle}\n      paddingY={!isVertical ? '12px' : undefined}\n      paddingX={isVertical ? '12px' : undefined}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box {...resolvedProps} style={trackStyle}>\n        {children}\n      </Box>\n    </Pressable>\n  );\n};\n\nexport default React.forwardRef(SliderTrack);\n"]}