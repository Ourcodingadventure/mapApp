{"version":3,"sources":["SliderThumb.tsx"],"names":["SliderThumb","props","ref","React","useContext","SliderContext","state","trackLayout","orientation","colorScheme","thumbSize","isReadOnly","isDisabled","resolvedProps","size","inputRef","useRef","index","thumbProps","inputProps","thumbAbsoluteSize","thumbStyles","bottom","getThumbPercent","undefined","left","transform","translateY","parseInt","translateX","push","scale","isThumbDragging","scaleOnPressed","style","children","Platform","OS","displayName"],"mappings":"wUAAA,qDACA,yCACA,iDACA,2DACA,qCACA,2DAEA,mDACA,kCACA,2E,2GAEA,QAASA,CAAAA,WAAT,CAAqBC,KAArB,CAA+CC,GAA/C,CAAyD,uBASnDC,eAAMC,UAAN,CAAiBC,sBAAjB,CATmD,CAErDC,KAFqD,mBAErDA,KAFqD,CAGrDC,WAHqD,mBAGrDA,WAHqD,CAIrDC,WAJqD,mBAIrDA,WAJqD,CAKrDC,WALqD,mBAKrDA,WALqD,CAMrDC,SANqD,mBAMrDA,SANqD,CAOrDC,UAPqD,mBAOrDA,UAPqD,CAQrDC,UARqD,mBAQrDA,UARqD,CAUvD,GAAMC,CAAAA,aAAa,CAAG,sCACpB,aADoB,wBAGlBC,IAAI,CAAEJ,SAHY,CAIlBD,WAAW,CAAXA,WAJkB,EAKfR,KALe,EAOpB,CAAEW,UAAU,CAAVA,UAAF,CAAcD,UAAU,CAAVA,UAAd,CAPoB,CAAtB,CASA,GAAMI,CAAAA,QAAQ,CAAGZ,eAAMa,MAAN,CAAa,IAAb,CAAjB,CAnBuD,oBAoBpB,2BACjC,CACEC,KAAK,CAAE,CADT,CAEEV,WAAW,CAAXA,WAFF,CAGEQ,QAAQ,CAARA,QAHF,CAIEP,WAAW,CAAXA,WAJF,CADiC,CAOjCF,KAPiC,CApBoB,CAoB/CY,UApB+C,iBAoB/CA,UApB+C,CAoBnCC,UApBmC,iBAoBnCA,UApBmC,CA8BvD,GAAMC,CAAAA,iBAAiB,CAAG,oBAAS,OAAT,CAAkBP,aAAa,CAACC,IAAhC,CAA1B,CAEA,GAAMO,CAAAA,WAAgB,CAAG,CACvBC,MAAM,CACJd,WAAW,GAAK,UAAhB,CACOF,KAAK,CAACiB,eAAN,CAAsB,CAAtB,EAA2B,GADlC,KAEIC,SAJiB,CAKvBC,IAAI,CACFjB,WAAW,GAAK,UAAhB,CACOF,KAAK,CAACiB,eAAN,CAAsB,CAAtB,EAA2B,GADlC,KAEIC,SARiB,CASvBE,SAAS,CACPlB,WAAW,GAAK,UAAhB,CACI,CAAC,CAAEmB,UAAU,CAAEC,QAAQ,CAACR,iBAAD,CAAR,CAA8B,CAA5C,CAAD,CADJ,CAEI,CAAC,CAAES,UAAU,CAAE,CAACD,QAAQ,CAACR,iBAAD,CAAT,CAA+B,CAA7C,CAAD,CAZiB,CAAzB,CAeAC,WAAW,CAACK,SAAZ,CAAsBI,IAAtB,CAA2B,CACzBC,KAAK,CAAEzB,KAAK,CAAC0B,eAAN,CAAsB,CAAtB,EAA2BnB,aAAa,CAACoB,cAAzC,CAA0D,CADxC,CAA3B,EAIA,GAAI,iDAAsBhC,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,YAAD,wBACE,QAAQ,CAAC,UADX,EAEMiB,UAFN,CAGML,aAHN,EAIE,GAAG,CAAEX,GAJP,CAKE,KAAK,CAAE,CAACmB,WAAD,CAAcpB,KAAK,CAACiC,KAApB,CALT,6EASGjC,KAAK,CAACkC,QATT,CAUGC,sBAASC,EAAT,GAAgB,KAAhB,EACC,6BAAC,8BAAD,6EACE,4DAAO,GAAG,CAAEtB,QAAZ,EAA0BI,UAA1B,+EADF,CAXJ,CADF,CAkBD,CAEDnB,WAAW,CAACsC,WAAZ,CAA0B,aAA1B,C,aAEe,sBAAWtC,WAAX,C","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n  const resolvedProps = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      colorScheme,\n      ...props,\n    },\n    { isDisabled, isReadOnly }\n  );\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      ref={ref}\n      style={[thumbStyles, props.style]}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n    >\n      {props.children}\n      {Platform.OS === 'web' && (\n        <VisuallyHidden>\n          <input ref={inputRef} {...inputProps} />\n        </VisuallyHidden>\n      )}\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]}