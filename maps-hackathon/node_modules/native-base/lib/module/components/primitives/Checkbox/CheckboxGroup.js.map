{"version":3,"sources":["CheckboxGroup.tsx"],"names":["CheckboxGroupContext","CheckboxGroup","ref","size","colorScheme","props","children","state","accessibilityLabel","groupProps","formControlContext"],"mappings":"qdAAA,qDACA,iDACA,sDACA,yDAEA,mDACA,2E,+GAEO,GAAMA,CAAAA,oBAAoB,CAAG,yBAClC,IADkC,CAA7B,C,kDAIP,QAASC,CAAAA,aAAT,MAEEC,GAFF,CAGE,IAFEC,CAAAA,IAEF,MAFEA,IAEF,CAFQC,WAER,MAFQA,WAER,CAFwBC,KAExB,uEACQC,CAAAA,QADR,CACqBD,KADrB,CACQC,QADR,CAEA,GAAMC,CAAAA,KAAK,CAAG,oCAAsBF,KAAtB,CAAd,CAFA,sBAGuB,uDACnB,aAAcA,KAAK,CAACG,kBADD,EACwBH,KADxB,EAErBE,KAFqB,CAHvB,CAGQE,UAHR,mBAGQA,UAHR,CAOA,GAAMC,CAAAA,kBAAkB,CAAG,wCAA3B,CAEA,GAAI,0EAA2BL,KAA3B,EAAkCF,IAAI,CAAJA,IAAlC,CAAwCC,WAAW,CAAXA,WAAxC,GAAJ,CAA4D,CAC1D,MAAO,KAAP,CACD,CACD,MACE,8BAAC,oBAAD,CAAsB,QAAtB,EACE,KAAK,wBACHD,IAAI,CAAJA,IADG,CAEHC,WAAW,CAAXA,WAFG,EAGAM,kBAHA,EAIHH,KAAK,CAALA,KAJG,EADP,4EAQE,6BAAC,YAAD,wBAAK,UAAU,CAAC,YAAhB,EAAiCE,UAAjC,CAAiDJ,KAAjD,EAAwD,GAAG,CAAEH,GAA7D,6EACGI,QADH,CARF,CADF,CAcD,C,aAEc,gBAAK,sBAAWL,aAAX,CAAL,C","sourcesContent":["import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        size,\n        colorScheme,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box alignItems=\"flex-start\" {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]}