{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","ref","wrapperRef","props","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","React","useContext","CheckboxGroupContext","_ref","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","isHovered","accessibilityLabel","value","inputProps","checked","isDisabled","disabled","focusProps","isFocusVisible","icon","_interactionBox","_icon","resolvedProps","stylingProps","margin","layout","flexbox","position","layoutProps","nonLayoutProps","component","transition","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { mergeRefs } from './../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n  const { isHovered } = useHover({}, _ref);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  const { icon, _interactionBox, _icon, ...resolvedProps } = usePropsResolution(\n    'Checkbox',\n    {\n      ...checkboxGroupContext,\n      ...combinedProps,\n    },\n    {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    '_text',\n  ]);\n\n  const component = (\n    <Box\n      {...layoutProps}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      opacity={isDisabled ? 0.4 : 1}\n      cursor={isDisabled ? 'not-allowed' : 'pointer'}\n    >\n      <Center>\n        {/* Interaction Box */}\n        <Box\n          {..._interactionBox}\n          style={{\n            // @ts-ignore - only for web\"\n            transition: 'height 200ms, width 200ms',\n          }}\n          h={\n            isFocusVisible || isHovered || isChecked || isInvalid\n              ? '200%'\n              : '100%'\n          }\n          w={\n            isFocusVisible || isHovered || isChecked || isInvalid\n              ? '200%'\n              : '100%'\n          }\n          zIndex={-1}\n        />\n        {/* Checkbox */}\n        <Center {...nonLayoutProps}>\n          {/* {iconResolver()} */}\n          <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n        </Center>\n      </Center>\n      {/* Label */}\n      {resolvedProps?.children}\n    </Box>\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <Box\n      // @ts-ignore - RN web supports accessibilityRole=\"label\"\n      accessibilityRole=\"label\"\n      ref={mergeRefs([wrapperRef, _ref])}\n    >\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} ref={mergedRef} />\n      </VisuallyHidden>\n\n      {component}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}