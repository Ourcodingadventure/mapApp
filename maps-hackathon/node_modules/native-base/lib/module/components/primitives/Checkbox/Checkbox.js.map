{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","ref","wrapperRef","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","React","useContext","CheckboxGroupContext","_ref","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","accessibilityLabel","value","inputProps","checked","isDisabled","disabled","icon","_interactionBox","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","stylingProps","margin","layout","flexbox","position","layoutProps","nonLayoutProps","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  const state = useToggleState({\n    ...combinedProps,\n    defaultSelected: combinedProps.defaultIsChecked,\n    isSelected: combinedProps.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n  const {\n    icon,\n    _interactionBox,\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Checkbox',\n    {\n      ...checkboxGroupContext,\n      ...combinedProps,\n    },\n    {\n      isInvalid,\n      isReadOnly,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered,\n      isPressed,\n      isFocused,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    '_text',\n  ]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...(pressableProps as IPressableProps)}\n      {...inputProps}\n      ref={mergeRefs([ref, wrapperRef])}\n      accessibilityRole=\"checkbox\"\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n    >\n      <Center {...layoutProps} flexDirection=\"row\" borderRadius=\"full\">\n        <Center>\n          {/* Interaction Wrapper */}\n          <Box {..._interactionBox} p={5} w=\"100%\" height=\"100%\" zIndex={-1} />\n          {/* Checkbox */}\n          <Center {...nonLayoutProps}>\n            <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n          </Center>\n        </Center>\n        {/* Label */}\n        {combinedProps.children}\n      </Center>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}