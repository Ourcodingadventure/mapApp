{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","ref","children","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","index","start","unordered","ul","ordered","ol","_text","borderTopWidth","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","_ref","React","useRef","pressableComponentProps","nonPressableProps","Object","keys","length","transform","scale","_hover","_pressed","_focus","fontWeight"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IListItemProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Pressable } from '../Pressable';\n// import { useHover } from '@react-native-aria/interactions';\nimport { extractInObject } from '../../../theme/tools';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ListItem = ({ children, ...props }: IListItemProps, ref: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const {\n    index,\n    start,\n    unordered,\n    ul,\n    ordered,\n    ol,\n    _text,\n    borderTopWidth,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ListItem', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n  });\n  const _ref = React.useRef(null);\n  // const { isHovered } = useHover({}, _ref);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // Extracting Pressable Props from resolvedProps\n  const [\n    pressableComponentProps,\n    nonPressableProps,\n  ] = extractInObject(resolvedProps, [\n    'onPress',\n    'unstable_pressDelay',\n    'android_ripple',\n    'android_disableSound',\n    'delayLongPress',\n    'hitSlop',\n    'disabled',\n    'onLongPress',\n    'onPressIn',\n    'onPressOut',\n    'pressRetentionOffset',\n    'testOnly_pressed',\n    'onHoverIn',\n    'onHoverOut',\n    'onFocus',\n    'onBlur',\n    '_pressed',\n    '_focus',\n  ]);\n\n  return Object.keys(pressableComponentProps).length !== 0 ? (\n    // Checking if any Pressable Props present\n    <Pressable\n      accessibilityRole=\"button\"\n      accessibilityLabel={`List-Item-${index + start}`}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...resolvedProps}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n      borderTopWidth={index ? borderTopWidth : 0}\n      ref={ref}\n    >\n      {/* {({ isPressed, isHovered, isFocusVisible }: any) => {\n        const focusTextProps = isFocusVisible &&\n          _focus?._text && { ..._focus._text };\n        const hoverTextProps = isHovered &&\n          _hover?._text && { ..._hover._text };\n        const pressedTextProps = isPressed &&\n          _pressed?._text && { ..._pressed._text };\n        return ( */}\n      <>\n        <Box flexDirection=\"row\" alignItems=\"center\" pl={2}>\n          {ul || unordered ? ( //Adding disc in front of ListItem\n            <Box\n              style={{ transform: [{ scale: 1.5 }] }}\n              mr={2}\n              // _text={{\n              //   fontWeight: 'bold',\n              //   ..._text,\n              //   ...hoverTextProps,\n              //   ...focusTextProps,\n              //   ...pressedTextProps,\n              // }}\n            >\n              •\n            </Box>\n          ) : null}\n          {ol || ordered ? ( //Adding index number in front of ListItem\n            <Box\n              mr={2}\n              // _text={{\n              //   fontWeight: 'bold',\n              //   ..._text,\n              //   ...hoverTextProps,\n              //   ...focusTextProps,\n              //   ...pressedTextProps,\n              // }}\n            >\n              {index + start + '.'}\n            </Box>\n          ) : null}\n        </Box>\n        <Box\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          // _text={{\n          //   ..._text,\n          //   ...hoverTextProps,\n          //   ...focusTextProps,\n          //   ...pressedTextProps,\n          // }}\n        >\n          {children}\n        </Box>\n      </>\n      {/* ); */}\n      {/* }} */}\n    </Pressable>\n  ) : (\n    // If no Pressable Props passed by user render Box instead of Pressable\n    <Box\n      accessibilityRole=\"text\"\n      accessibilityLabel={`List-Item-${index + start}`}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...nonPressableProps}\n      borderTopWidth={index ? borderTopWidth : 0}\n      ref={mergeRefs([ref, _ref])}\n      {...(isHovered && resolvedProps._hover)}\n      {...(isPressed && resolvedProps._pressed)}\n      {...(isFocused && resolvedProps._focus)}\n    >\n      <Box flexDirection=\"row\" alignItems=\"center\" pl={2}>\n        {ul || unordered ? ( //Adding disc in front of ListItem\n          <Box\n            style={{ transform: [{ scale: 1.5 }] }}\n            mr={2}\n            _text={{ fontWeight: 'bold', ..._text }}\n          >\n            •\n          </Box>\n        ) : null}\n        {ol || ordered ? ( //Adding index number in front of ListItem\n          <Box mr={2} _text={{ fontWeight: 'bold', ..._text }}>\n            {index + start + '.'}\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        flex={1}\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        _text={\n          _text\n          // ...(isHovered && _hover?._text && { ..._hover._text }),\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(ListItem));\n"]}