{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","Svg","SVGIcon","ref","children","props","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","React","Children","count","map","child","i","key","questionOutlineIconPath","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":"wbAAA,qDACA,qCACA,6CACA,8BAEA,0DACA,2E,gHAEA,GAAMA,CAAAA,GAAG,CAAG,gCAAoBC,UAApB,CAAZ,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAqCC,GAArC,CAAkD,IAA/CC,CAAAA,QAA+C,MAA/CA,QAA+C,CAAlCC,KAAkC,kFAO5D,8BAAmB,MAAnB,CAA2BA,KAA3B,CAP4D,CAE9DC,SAF8D,qBAE9DA,SAF8D,CAG9DC,MAH8D,qBAG9DA,MAH8D,CAI9DC,KAJ8D,qBAI9DA,KAJ8D,CAK9DC,IAL8D,qBAK9DA,IAL8D,CAM3DC,aAN2D,kGAQhE,GAAMC,CAAAA,SAAS,CAAG,oBAAS,QAAT,CAAmBJ,MAAM,EAAI,EAA7B,CAAlB,CACA,GAAMK,CAAAA,QAAQ,CAAG,oBAAS,QAAT,CAAmBJ,KAAK,EAAI,EAA5B,CAAjB,CAEA,GAAI,iDAAsBH,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,GAAD,0BACMK,aADN,EAYE,IAAI,CAAED,IAZR,CAaE,KAAK,CAAEG,QAbT,CAcE,MAAM,CAAED,SAdV,CAeE,SAAS,CAAEL,SAfb,CAgBE,iBAAiB,CAAC,OAhBpB,CAkBE,GAAG,CAAEH,GAlBP,8EAoBGU,eAAMC,QAAN,CAAeC,KAAf,CAAqBX,QAArB,EAAiC,CAAjC,CACC,6BAAC,QAAD,8EACGS,eAAMC,QAAN,CAAeE,GAAf,CAAmBZ,QAAnB,CAA6B,SAACa,KAAD,CAAQC,CAAR,uBAC5B,8BAAC,SAAD,wBACE,GAAG,aAAED,KAAF,cAAEA,KAAK,CAAEE,GAAT,mBAAgBD,CADrB,CAEE,OAAO,CAAED,KAFX,EAGMA,KAHN,cAGMA,KAAK,CAAEZ,KAHb,gFAD4B,EAA7B,CADH,CADD,CAWCe,yCA/BJ,CADF,CAoCD,CAlDD,CAmDA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,OAAgD,IAA7CC,CAAAA,OAA6C,OAA7CA,OAA6C,CAApCC,IAAoC,OAApCA,IAAoC,CAAtBC,UAAsB,OAA9BjB,MAA8B,CAChE,GAAMkB,CAAAA,eAAe,CAAG,oBAAS,QAAT,CAAmBD,UAAU,EAAI,EAAjC,CAAxB,CACA,GAAME,CAAAA,SAAS,CAAG,oBAAS,QAAT,CAAmBH,IAAI,EAAI,EAA3B,CAAlB,CAEA,GAAI,CAACD,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CAED,MAAOT,gBAAMc,YAAN,CAAmBL,OAAnB,CAA4B,CACjCC,IAAI,CAAEG,SAAS,CAAGA,SAAH,CAAe,cADG,CAEjCnB,MAAM,CAAEkB,eAFyB,CAA5B,CAAP,CAID,CAZD,C,aAae,gBAAK,sBAAWvB,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]}