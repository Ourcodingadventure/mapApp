{"version":3,"sources":["Button.tsx"],"names":["Button","ref","children","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","spinnerPlacement","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","ignoreProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","resolvedProps","React","isValidElement","Children","map","child","index","cloneElement","key","boxChildren","spinnerElement","color","accessibilityRole"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Button',\n    props,\n    { isDisabled, isHovered, isFocused, isPressed, isLoading },\n    { ignoreProps: ['_spinner'] }\n  );\n\n  // const pressableProps = {\n  //   ...resolvedProps,\n  //   _hover,\n  //   _pressed,\n  //   _focus,\n  //   _focusVisible,\n  // };\n  // let {\n  //   _text,\n  //   _disabled,\n  //   _focus,\n  //   _hover,\n  //   _pressed,\n  //   _focusVisible,\n  //   _loading,\n  //   _stack,\n  //   _spinner,\n  //   spinnerProps,\n  //   isLoadingText,\n  //   ...resolvedProps\n  // } = usePropsResolution('Button', props);\n\n  // const pressableProps = {\n  //   ...resolvedProps,\n  //   _hover,\n  //   _pressed,\n  //   _focus,\n  //   _focusVisible,\n  // };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const boxChildren = isLoading && isLoadingText ? isLoadingText : children;\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      // {...pressableProps}\n      // {...(isDisabled && _disabled)}\n      // {...(isLoading && _loading)}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {boxChildren ? (\n          <Box\n            _text={{\n              ..._text,\n              // ...hoverTextProps,\n              // ...focusTextProps,\n              // ...focusVisibleTextProps,\n              // ...pressedTextProps,\n              // ...loadingTextProps,\n              // ...disabledTextProps,\n            }}\n          >\n            {isLoading && isLoadingText ? isLoadingText : children}\n          </Box>\n        ) : null}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]}