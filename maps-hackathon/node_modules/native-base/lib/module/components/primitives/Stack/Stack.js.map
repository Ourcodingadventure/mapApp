{"version":3,"sources":["Stack.tsx"],"names":["Stack","ref","space","props","size","resolveResponsively","children","direction","reversed","divider","resolvedProps"],"mappings":"wbAAA,qDACA,mDACA,qCACA,2DAEA,2E,+GA2BA,GAAMA,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAmCC,GAAnC,CAAiD,IAA9CC,CAAAA,KAA8C,MAA9CA,KAA8C,CAApCC,KAAoC,+EAQpD,sCACP,OADO,0BAEFA,KAFE,EAEKC,IAAI,CAAEF,KAFX,GAGP,EAHO,CAIP,CAAEG,mBAAmB,CAAE,CAAC,OAAD,CAAU,WAAV,CAAvB,CAJO,CARoD,CAE3DC,QAF2D,qBAE3DA,QAF2D,CAG3DC,SAH2D,qBAG3DA,SAH2D,CAI3DC,QAJ2D,qBAI3DA,QAJ2D,CAK3DC,OAL2D,qBAK3DA,OAL2D,CAM3DL,IAN2D,qBAM3DA,IAN2D,CAOxDM,aAPwD,iHAgB7D,GAAI,iDAAsBP,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,YAAD,wBAAK,aAAa,CAAEI,SAApB,EAAmCG,aAAnC,EAAkD,GAAG,CAAET,GAAvD,8EACG,6BACCK,QADD,CAECF,IAFD,CAGCG,SAAS,GAAK,KAAd,CAAsB,GAAtB,CAA4B,GAH7B,CAICC,QAAQ,CAAG,SAAH,CAAe,QAJxB,CAKCC,OALD,CADH,CADF,CAWD,CA9BD,C,aAgCe,gBAAK,sBAAWT,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IBoxProps } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue } from '../../types';\n\nexport interface IStackProps extends IBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | number\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {},\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box flexDirection={direction} {...resolvedProps} ref={ref}>\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]}