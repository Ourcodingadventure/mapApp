{"version":3,"sources":["FormControl.tsx"],"names":["FormControl","props","ref","htmlProps","context","resolvedProps"],"mappings":"wbAAA,qDACA,2DACA,iEAEA,gDACA,2E,2HAEA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAA2BC,GAA3B,CAAwC,2BACxB,2CAAuBD,KAAvB,CADwB,CAClDE,SADkD,uBAClDA,SADkD,CACpCC,OADoC,4EAE1D,GAAMC,CAAAA,aAAa,CAAG,sCAAmB,aAAnB,CAAkCJ,KAAlC,CAAtB,CAEA,GAAI,iDAAsBA,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,kCAAD,CAAoB,QAApB,EAA6B,KAAK,CAAEG,OAApC,6EACE,6BAAC,YAAD,wBAAK,KAAK,CAAC,MAAX,EAAsBC,aAAtB,CAAyCF,SAAzC,EAAoD,GAAG,CAAED,GAAzD,8EADF,CADF,CAKD,CAZD,C,aAce,gBAAK,sBAAWF,WAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box width=\"100%\" {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]}