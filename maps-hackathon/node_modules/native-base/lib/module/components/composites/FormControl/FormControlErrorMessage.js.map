{"version":3,"sources":["FormControlErrorMessage.tsx"],"names":["FormControlErrorMessage","ref","children","_disabled","rightIcon","startIcon","leftIcon","endIcon","props","_text","_stack","resolvedProps","formControlContext","React","isValidElement","Children","map","child","index","cloneElement","key","useEffect","setHasFeedbackText","isInvalid","helpTextId","isDisabled"],"mappings":"wbAAA,qDACA,iEACA,6CACA,2DACA,gDAEA,2E,uIAEA,GAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,MAU9BC,GAV8B,CAW3B,IATDC,CAAAA,QASC,MATDA,QASC,CARDC,SAQC,MARDA,SAQC,CAPDC,SAOC,MAPDA,SAOC,CANDC,SAMC,MANDA,SAMC,CALDC,QAKC,MALDA,QAKC,CAJDC,OAIC,MAJDA,OAIC,CAHEC,KAGF,2IACyC,sCAC1C,yBAD0C,CAE1CA,KAF0C,CADzC,CACKC,KADL,qBACKA,KADL,CACYC,MADZ,qBACYA,MADZ,CACuBC,aADvB,+EAMH,GAAMC,CAAAA,kBAAkB,CAAG,2CAA3B,CACA,GAAIR,SAAJ,CAAe,CACbG,OAAO,CAAGH,SAAV,CACD,CACD,GAAIE,QAAJ,CAAc,CACZD,SAAS,CAAGC,QAAZ,CACD,CACD,GAAIC,OAAO,EAAIM,eAAMC,cAAN,CAAqBP,OAArB,CAAf,CAA8C,CAC5CA,OAAO,CAAGM,eAAME,QAAN,CAAeC,GAAf,CACRT,OADQ,CAER,SAACU,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOL,gBAAMM,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,oBAAqBF,KADnB,EAEFT,KAFE,CAGFQ,KAAK,CAACT,KAHJ,EAAP,CAKD,CARO,CAAV,CAUD,CACD,GAAIH,SAAS,EAAIQ,eAAMC,cAAN,CAAqBT,SAArB,CAAjB,CAAkD,CAChDA,SAAS,CAAGQ,eAAME,QAAN,CAAeC,GAAf,CACVX,SADU,CAEV,SAACY,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOL,gBAAMM,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,sBAAuBF,KADrB,EAEFT,KAFE,CAGFQ,KAAK,CAACT,KAHJ,EAAP,CAKD,CARS,CAAZ,CAUD,CAEDK,eAAMQ,SAAN,CAAgB,UAAM,CACpBT,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEU,kBAApB,CAAuC,IAAvC,EACA,MAAO,WAAM,CACXV,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEU,kBAApB,CAAuC,KAAvC,EACD,CAFD,CAGD,CALD,EAOA,GAAI,iDAAsBd,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAOI,CAAAA,kBAAkB,MAAlB,EAAAA,kBAAkB,CAAEW,SAApB,CACL,6BAAC,YAAD,wBACE,QAAQ,CAAEX,kBAAF,cAAEA,kBAAkB,CAAEY,UADhC,EAEMb,aAFN,CAGMH,KAHN,CAIO,CAAAI,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEa,UAApB,GAAkCtB,SAJzC,EAKE,GAAG,CAAEF,GALP,8EAOE,6BAAC,aAAD,0BAAYS,MAAZ,+EACGL,SADH,CAEE,6BAAC,YAAD,EAAK,KAAK,CAAEI,KAAZ,6EAAoBP,QAApB,CAFF,CAGGK,OAHH,CAPF,CADK,CAcH,IAdJ,CAeD,CA1ED,C,aA4Ee,gBAAK,sBAAWP,uBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlErrorMessageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControlErrorMessage = (\n  {\n    children,\n    _disabled,\n    rightIcon,\n    startIcon,\n    leftIcon,\n    endIcon,\n    ...props\n  }: IFormControlErrorMessageProps,\n  ref: any\n) => {\n  const { _text, _stack, ...resolvedProps } = usePropsResolution(\n    'FormControlErrorMessage',\n    props\n  );\n\n  const formControlContext = useFormControlContext();\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  React.useEffect(() => {\n    formControlContext?.setHasFeedbackText(true);\n    return () => {\n      formControlContext?.setHasFeedbackText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return formControlContext?.isInvalid ? (\n    <Box\n      nativeID={formControlContext?.helpTextId}\n      {...resolvedProps}\n      {...props}\n      {...(formControlContext?.isDisabled && _disabled)}\n      ref={ref}\n    >\n      <HStack {..._stack}>\n        {startIcon}\n        <Box _text={_text}>{children}</Box>\n        {endIcon}\n      </HStack>\n    </Box>\n  ) : null;\n};\n\nexport default memo(forwardRef(FormControlErrorMessage));\n"]}