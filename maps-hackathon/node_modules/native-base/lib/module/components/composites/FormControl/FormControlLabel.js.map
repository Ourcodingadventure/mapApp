{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","ref","children","_disabled","_invalid","props","formControlContext","_ref","React","useRef","astrickColor","reslovedProps","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isInvalid","isDisabled","isRequired"],"mappings":"wbAAA,qDACA,iEACA,mEACA,gDACA,2DAEA,qC,gIAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,OAEvBC,GAFuB,CAGpB,IAFDC,CAAAA,QAEC,OAFDA,QAEC,CAFSC,SAET,OAFSA,SAET,CAFoBC,QAEpB,OAFoBA,QAEpB,CAFiCC,KAEjC,kFACH,GAAMC,CAAAA,kBAAkB,CAAG,2CAA3B,CACA,GAAMC,CAAAA,IAAI,CAAGC,eAAMC,MAAN,CAA+B,IAA/B,CAAb,CAFG,wBAGwC,sCACzC,kBADyC,CAEzCJ,KAFyC,CAHxC,CAGKK,YAHL,qBAGKA,YAHL,CAGsBC,aAHtB,6EAQH,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SACvB,8BAAC,aAAD,EACE,IAAI,CAAE,CACJC,mBAAmB,CAAE,IADjB,CAGJC,iBAAiB,CAAE,cAHf,CADR,CAME,KAAK,CAAEJ,YANT,iFADuB,EAAzB,CAYA,GAAMK,CAAAA,SAAS,CAAG,qBAAU,CAACR,IAAD,CAAON,GAAP,CAAV,CAAlB,CACAO,eAAMQ,SAAN,CAAgB,UAAM,CACpB,GAAIT,IAAI,CAACU,OAAT,CAAkB,CAEhB,GAAIZ,KAAK,CAACa,OAAV,CAAmB,CACjBX,IAAI,CAACU,OAAL,CAAaC,OAAb,CAAuBb,KAAK,CAACa,OAA7B,CACD,CAFD,IAEO,IAAIZ,kBAAJ,QAAIA,kBAAkB,CAAEa,QAAxB,CAAkC,CACvCZ,IAAI,CAACU,OAAL,CAAaC,OAAb,CAAuBZ,kBAAkB,CAACa,QAA1C,CACD,CACF,CACF,CATD,CASG,CAACb,kBAAD,cAACA,kBAAkB,CAAEa,QAArB,CAA+Bd,KAAK,CAACa,OAArC,CATH,EAWA,MACE,8BAAC,YAAD,wBACE,aAAa,CAAC,KADhB,CAEE,cAAc,CAAC,YAFjB,CAGE,IAAI,CAAE,CAEJJ,iBAAiB,CAAE,OAFf,CAHR,EAOMH,aAPN,EAQE,QAAQ,CAAEL,kBAAF,cAAEA,kBAAkB,CAAEc,OARhC,EASMf,KATN,EAUE,GAAG,CAAEU,SAVP,EAWO,CAAAT,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEe,SAApB,GAAiCjB,QAXxC,CAYO,CAAAE,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEgB,UAApB,GAAkCnB,SAZzC,+EAcGD,QAdH,CAeG,CAAAI,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAEiB,UAApB,GAAkCX,gBAAgB,EAfrD,CADF,CAmBD,CAtDD,C,aAuDe,gBAAK,sBAAWZ,gBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, _disabled, _invalid, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { astrickColor, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    props\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      color={astrickColor}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (formControlContext?.nativeID) {\n        _ref.current.htmlFor = formControlContext.nativeID;\n      }\n    }\n  }, [formControlContext?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={formControlContext?.labelId}\n      {...props}\n      ref={mergedRef}\n      {...(formControlContext?.isInvalid && _invalid)}\n      {...(formControlContext?.isDisabled && _disabled)}\n    >\n      {children}\n      {formControlContext?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]}