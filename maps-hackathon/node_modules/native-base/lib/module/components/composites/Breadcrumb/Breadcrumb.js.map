{"version":3,"sources":["Breadcrumb.tsx"],"names":["Breadcrumb","ref","style","children","separator","_text","maxItems","_button","isCollapsed","onCollapseChange","props","textProps","value","defaultValue","onChange","collapsed","setCollapsed","spacing","newProps","separatorProps","accessibilityRole","Platform","OS","undefined","separatorElement","React","cloneElement","mx","length","getBreadcrumbSeparator","Array","isArray","result","buttonAdded","i","push","map","child","index","key","CollapseButton","remainingProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from 'native-base';\nimport type { IBreadcrumbProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport type { IFlexProps } from '../../primitives';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\n\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (\n  {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  }: IBreadcrumbProps & IFlexProps,\n  ref: any\n) => {\n  const textProps = { ..._text };\n\n  // Maintaining state to show all children on press of collapse button\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: (value) => {\n      onCollapseChange && onCollapseChange(value);\n    },\n  });\n  const { spacing, ...newProps } = usePropsResolution('Breadcrumb', props);\n\n  const separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n  const separatorElement = separator ? (\n    typeof separator === 'string' ? (\n      <Text {...separatorProps} mx={spacing}>\n        {separator}\n      </Text>\n    ) : (\n      React.cloneElement(separator, {\n        mx: spacing,\n        ...separatorProps,\n      })\n    )\n  ) : (\n    <Text mx={spacing} {...separatorProps}>\n      {'/'}\n    </Text>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <HStack\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      {...newProps}\n      ref={ref}\n      style={style}\n      // Custom Separator\n      divider={separatorElement}\n      space={spacing}\n      // @ts-ignore - Web only prop\n      accessibilityRole={Platform.OS === 'web' ? 'navigation' : undefined}\n      accessibilityLabel=\"Breadcrumb\"\n    >\n      {children && !children.length\n        ? children\n        : getBreadcrumbSeparator(\n            children,\n            textProps,\n            maxItems,\n            _button,\n            collapsed,\n            setCollapsed\n          )}\n    </HStack>\n  );\n};\n\n// Returns children to be rendered\nconst getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  props: any,\n  maxItems: number | number[] | undefined,\n  _button: any,\n  collapsed: boolean | undefined,\n  setCollapsed: any\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result: any = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      }\n      // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1])\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                // pushing Collapsible button as a child\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n\n// Collapse button\nconst CollapseButton = (props: any) => {\n  const { ...remainingProps } = props;\n\n  return (\n    <Pressable\n      {...remainingProps}\n      onPress={() => {\n        props.setCollapsed(false);\n      }}\n    >\n      <ThreeDotsIcon size={4} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Breadcrumb));\nexport type { IBreadcrumbProps };\n"]}