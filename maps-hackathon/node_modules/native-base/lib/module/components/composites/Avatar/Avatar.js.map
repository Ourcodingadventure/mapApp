{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","ref","children","props","React","useState","error","setError","_text","source","style","resolvedProps","Badge","remainingChildren","Children","map","child","key","type","displayName","push","imageFitStyle","height","width","borderRadius","length"],"mappings":"ohBAAA,qDACA,4CACA,2DAEA,2E,iHAEA,GAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAuCC,GAAvC,CAAoD,IAAjDC,CAAAA,QAAiD,MAAjDA,QAAiD,CAApCC,KAAoC,8EACvCC,eAAMC,QAAN,CAAe,KAAf,CADuC,iEAC1DC,KAD0D,qBACnDC,QADmD,6CAEd,sCACjD,QADiD,CAEjDJ,KAFiD,CAFc,CAEzDK,KAFyD,qBAEzDA,KAFyD,CAElDC,MAFkD,qBAElDA,MAFkD,CAE1CC,KAF0C,qBAE1CA,KAF0C,CAEhCC,aAFgC,uFAOjE,GAAIC,CAAAA,KAAK,CAAG,0DAAZ,CACA,GAAMC,CAAAA,iBAAgC,CAAG,EAAzC,CAEAT,eAAMU,QAAN,CAAeC,GAAf,CAAmBb,QAAnB,CAA6B,SAACc,KAAD,CAAQC,GAAR,CAAgB,CAC3C,GACE,OAAOD,KAAP,cAAOA,KAAK,CAAEE,IAAd,IAAuB,QAAvB,EACA,CAAAF,KAAK,MAAL,QAAAA,KAAK,CAAEE,IAAP,CAAYC,WAAZ,IAA4B,aAF9B,CAGE,CACAP,KAAK,CAAGI,KAAR,CACD,CALD,IAKO,CACLH,iBAAiB,CAACO,IAAlB,CACE,MAAOJ,CAAAA,KAAP,GAAiB,QAAjB,EAA6B,MAAOA,CAAAA,KAAP,GAAiB,QAA9C,CACE,6BAAC,gBAAD,wBAAM,GAAG,CAAE,mBAAqBC,GAAhC,EAAyCT,KAAzC,gFACGQ,KADH,CADF,CAKEA,KANJ,EASD,CACF,CAjBD,EAmBA,GAAMK,CAAAA,aAAkB,CAAG,CAAEC,MAAM,CAAE,MAAV,CAAkBC,KAAK,CAAE,MAAzB,CAA3B,CAEA,GAAI,iDAAsBpB,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,eAAD,0BAASQ,aAAT,+EACGF,MAAM,EAAI,CAACH,KAAX,CACC,6BAAC,iBAAD,EACE,YAAY,CAAEK,aAAa,CAACa,YAD9B,CAEE,MAAM,CAAEf,MAFV,CAGE,GAAG,CAAE,IAHP,CAIE,IAAI,CAAED,KAJR,CAKE,KAAK,CAAE,CAACE,KAAD,CAAQW,aAAR,CALT,CAME,OAAO,CAAE,kBAAM,CACbd,QAAQ,CAAC,IAAD,CAAR,CACD,CARH,CASE,GAAG,CAAEN,GATP,6EADD,CAaCY,iBAAiB,CAACY,MAAlB,GAA6B,CAA7B,EAAkCZ,iBAdtC,CAgBGD,KAhBH,CADF,CAoBD,CAtDD,C,aAwDe,gBAAK,sBAAWZ,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image, Text } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _text, source, style, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child, key) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = child;\n    } else {\n      remainingChildren.push(\n        typeof child === 'string' || typeof child === 'number' ? (\n          <Text key={'avatar-children-' + key} {..._text}>\n            {child}\n          </Text>\n        ) : (\n          child\n        )\n      );\n    }\n  });\n\n  const imageFitStyle: any = { height: '100%', width: '100%' };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box {...resolvedProps}>\n      {source && !error ? (\n        <Image\n          borderRadius={resolvedProps.borderRadius}\n          source={source}\n          alt={'--'}\n          _alt={_text}\n          style={[style, imageFitStyle]}\n          onError={() => {\n            setError(true);\n          }}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]}