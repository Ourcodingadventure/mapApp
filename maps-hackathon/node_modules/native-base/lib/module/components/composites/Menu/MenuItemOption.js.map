{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","props","ref","value","children","onPress","resolvedProps","React","useContext","MenuOptionContext","values","onChange","type","modifiedOnPress","e","isChecked","includes","menuOptionProps","px","_icon"],"mappings":"wbAAA,qDACA,kDACA,iEACA,2DACA,4DAEA,kDACA,kCACA,6CACA,2E,uHAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAA8BC,GAA9B,CAA2C,yBACT,sCACrD,UADqD,CAErDD,KAFqD,CADS,CACxDE,KADwD,qBACxDA,KADwD,CACjDC,QADiD,qBACjDA,QADiD,CACvCC,OADuC,qBACvCA,OADuC,CAC3BC,aAD2B,iHAKJC,eAAMC,UAAN,CAC1DC,kCAD0D,CALI,CAKxDC,MALwD,mBAKxDA,MALwD,CAKhDC,QALgD,mBAKhDA,QALgD,CAKtCC,IALsC,mBAKtCA,IALsC,CAQhE,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,CAAD,CAAY,CAClCH,QAAQ,CAACR,KAAD,CAAR,CACAE,OAAO,EAAIA,OAAO,CAACS,CAAD,CAAlB,CACD,CAHD,CAKA,GAAMC,CAAAA,SAAS,CAAGL,MAAM,CAACM,QAAP,CAAgBb,KAAhB,CAAlB,CACA,GAAMc,CAAAA,eAAe,CAAG,+BAAkB,CAAEF,SAAS,CAATA,SAAF,CAAaH,IAAI,CAAJA,IAAb,CAAlB,CAAxB,CAGA,GAAI,iDAAsBX,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,iBAAD,0BACMK,aADN,CAEMW,eAFN,EAGE,iBAAiB,CAAC,QAHpB,CAIE,OAAO,CAAEJ,eAJX,CAKE,GAAG,CAAEX,GALP,8EAOE,6BAAC,aAAD,EAAQ,UAAU,CAAC,QAAnB,CAA4B,EAAE,CAAEI,aAAa,CAACY,EAA9C,CAAkD,KAAK,CAAE,CAAzD,6EACE,6BAAC,gBAAD,0BAAeZ,aAAa,CAACa,KAA7B,EAAoC,OAAO,CAAEJ,SAAS,CAAG,CAAH,CAAO,CAA7D,8EADF,CAEE,6BAAC,YAAD,8EAAMX,QAAN,CAFF,CAPF,CADF,CAcD,CAlCD,C,aAoCe,gBAAK,sBAAWJ,cAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (props: IMenuItemOptionProps, ref: any) => {\n  const { value, children, onPress, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props\n  );\n  const { values, onChange, type }: IMenuOptionContextProps = React.useContext(\n    MenuOptionContext\n  );\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack alignItems=\"center\" px={resolvedProps.px} space={3}>\n        <CheckIcon {...resolvedProps._icon} opacity={isChecked ? 1 : 0} />\n        <Box>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]}