{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","React","useCallback","useState","setAccessibleColors","useEffect","escapeKeyListener","Platform","OS","e","key","keyboardDismissHandlerManager","length","lastHandler","pop","document","addEventListener","removeEventListener"],"mappings":"+PAAA,oDACA,yCACA,kCACA,4CAEA,mC,gHAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAQQ,IAP7BC,CAAAA,QAO6B,MAP7BA,QAO6B,mBAN7BC,OAM6B,oCAL3BC,gBAK2B,CAL3BA,gBAK2B,gCALR,OAKQ,0DAJ3BC,gBAI2B,CAJTC,qBAIS,gCAJe,KAIf,uBAH3BC,kBAG2B,cAH3BA,kBAG2B,CAD7BC,gBAC6B,MAD7BA,gBAC6B,qBAEO,0BAClCJ,gBADkC,CAElCG,kBAFkC,CAGlCC,gBAHkC,CAFP,CAErBC,SAFqB,iBAErBA,SAFqB,CAEVC,YAFU,iBAEVA,YAFU,CAQ7B,GAAMC,CAAAA,eAAe,CAAGC,eAAMC,WAAN,CAAkB,UAAM,CAC9CH,YAAY,CAACD,SAAS,GAAK,OAAd,CAAwB,MAAxB,CAAiC,OAAlC,CAAZ,CACD,CAFuB,CAErB,CAACA,SAAD,CAAYC,YAAZ,CAFqB,CAAxB,CAR6B,oBAamBE,eAAME,QAAN,CAC9CR,qBAD8C,CAbnB,iEAatBD,gBAbsB,qBAaJU,mBAbI,qBAiB7BH,eAAMI,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,iBAAsB,CAAG,IAA7B,CAEA,GAAIC,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CACzBF,iBAAiB,CAAG,2BAACG,CAAD,CAAsB,CACxC,GAAIA,CAAC,CAACC,GAAF,GAAU,QAAd,CAAwB,CACtB,GAAIC,sCAA8BC,MAA9B,GAAyC,CAA7C,CAAgD,CAC9C,GAAMC,CAAAA,WAAgB,CAAGF,sCAA8BG,GAA9B,EAAzB,CACAD,WAAW,GACZ,CACF,CACF,CAPD,CAQAE,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAqCV,iBAArC,EACD,CAED,MAAO,WAAM,CACX,GAAIC,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CACzBO,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,CAAwCX,iBAAxC,EACD,CACF,CAJD,CAKD,CApBD,CAoBG,EApBH,EAsBA,MACE,8BAAC,sBAAD,CAAe,QAAf,EACE,KAAK,CAAE,CACLR,SAAS,CAAE,CACTA,SAAS,CAATA,SADS,CAETE,eAAe,CAAfA,eAFS,CAGTD,YAAY,CAAZA,YAHS,CAITL,gBAAgB,CAAhBA,gBAJS,CAKTU,mBAAmB,CAAnBA,mBALS,CADN,CADT,6EAWGb,QAXH,CADF,CAeD,CA9DD,C,aAgEeD,c","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider\n      value={{\n        colorMode: {\n          colorMode,\n          toggleColorMode,\n          setColorMode,\n          accessibleColors,\n          setAccessibleColors,\n        },\n      }}\n    >\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]}