{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","props","colorModeManager","config","defaultConfig","children","theme","propsTheme","defaultTheme","initialWindowMetrics","isSSR","newTheme","React","useMemo","enableRem","windowWidth","currentBreakpoint","breakpoints","InitializeToastRef","toast","ToastRef","current"],"mappings":"8KAAA,oDACA,gDACA,0EAKA,+CACA,iCAEA,uFACA,qDACA,qDACA,sDAMA,yCACA,4C,qGAQA,GAAMA,CAAAA,0CAA0D,CAAGC,sBAASC,MAAT,CACjE,CACEC,GAAG,CAAE,CACHC,KAAK,CAAE,CAAEC,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAcC,KAAK,CAAE,CAArB,CAAwBC,MAAM,CAAE,CAAhC,CADJ,CAEHC,MAAM,CAAE,CAAEC,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,KAAK,CAAE,CAA1B,CAA6BC,MAAM,CAAE,CAArC,CAFL,CADP,CAKEC,OAAO,CAAEC,gDALX,CADiE,CAAnE,CAoBA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAoC,2CAE3DC,CAAAA,gBAF2D,CAQzDD,KARyD,CAE3DC,gBAF2D,eAQzDD,KARyD,CAG3DE,MAH2D,CAG3DA,MAH2D,wBAGlDC,gCAHkD,eAI3DC,QAJ2D,CAQzDJ,KARyD,CAI3DI,QAJ2D,cAQzDJ,KARyD,CAK3DK,KAL2D,CAKpDC,UALoD,uBAKvCC,YALuC,cAM3DC,oBAN2D,CAQzDR,KARyD,CAM3DQ,oBAN2D,CAO3DC,KAP2D,CAQzDT,KARyD,CAO3DS,KAP2D,CAS7D,GAAMJ,CAAAA,KAAK,gBAAGH,MAAM,CAACG,KAAV,sBAAmBC,UAA9B,CAEA,GAAMI,CAAAA,QAAQ,CAAGC,eAAMC,OAAN,CAAc,UAAM,CACnC,GAAIV,MAAM,CAACW,SAAX,CAAsB,CACpB,MAAO,uCAA2BR,KAA3B,CAAP,CACD,CACD,MAAOA,CAAAA,KAAP,CACD,CALgB,CAKd,CAACH,MAAM,CAACW,SAAR,CAAmBR,KAAnB,CALc,CAAjB,CAOA,GAAMS,CAAAA,WAAW,uBAAG,sCAAH,eAAG,qBAAuBxB,KAA3C,CAEA,GAAMyB,CAAAA,iBAAiB,CAAGJ,eAAMC,OAAN,CACxB,iBAAM,iCAAqBF,QAAQ,CAACM,WAA9B,CAA2CF,WAA3C,CAAN,EADwB,CAExB,CAACA,WAAD,CAAcJ,QAAQ,CAACM,WAAvB,CAFwB,CAA1B,CAKA,MACE,8BAAC,qBAAD,EAAe,KAAK,CAAEN,QAAtB,6EACE,6BAAC,2CAAD,EACE,MAAM,CAAER,MADV,CAEE,iBAAiB,CAAEa,iBAFrB,CAGE,KAAK,CAAEN,KAHT,6EAKE,6BAAC,4CAAD,EACE,cAAc,CACZD,oBADY,OACZA,oBADY,CACYzB,0CAF5B,6EAKE,6BAAC,uBAAD,EACE,gBAAgB,CAAEkB,gBADpB,CAEE,OAAO,CAAEI,KAAK,CAACH,MAFjB,8EAIE,6BAAC,yBAAD,+EACE,6BAAC,oBAAD,+EACE,6BAAC,kBAAD,+EADF,CAEE,6BAAC,kBAAD,+EAAcE,QAAd,CAFF,CADF,CAJF,CALF,CALF,CADF,CADF,CA2BD,CApDD,C,8CAsDA,GAAMa,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC/B,GAAMC,CAAAA,KAAK,CAAG,qBAAd,CACAC,gBAASC,OAAT,CAAmBF,KAAnB,CACA,MAAO,KAAP,CACD,CAJD","sourcesContent":["import React from 'react';\nimport { ThemeProvider } from 'styled-components/native';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <ThemeProvider theme={newTheme}>\n      <NativeBaseConfigProvider\n        config={config}\n        currentBreakpoint={currentBreakpoint}\n        isSSR={isSSR}\n      >\n        <SafeAreaProvider\n          initialMetrics={\n            initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n          }\n        >\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </SafeAreaProvider>\n      </NativeBaseConfigProvider>\n    </ThemeProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]}